<?php
/**
 * Video
 *
 * PHP version 5
 *
 * @category Class
 * @package  TelestreamCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flip API
 *
 * Description
 *
 * OpenAPI spec version: 3.1.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TelestreamCloud\Flip;

use \ArrayAccess;

/**
 * Video Class Doc Comment
 *
 * @category    Class
 * @package     TelestreamCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Video implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Video';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'audio_bitrate' => 'int',
        'audio_channels' => 'int',
        'audio_codec' => 'string',
        'audio_sample_rate' => 'int',
        'created_at' => 'string',
        'duration' => 'int',
        'encodings_count' => 'int',
        'error_class' => 'string',
        'error_message' => 'string',
        'extname' => 'string',
        'file_size' => 'int',
        'fps' => 'string',
        'height' => 'string',
        'width' => 'string',
        'mime_type' => 'string',
        'original_filename' => 'string',
        'path' => 'string',
        'payload' => 'string',
        'source_url' => 'string',
        'status' => 'string',
        'updated_at' => 'string',
        'video_bitrate' => 'string',
        'video_codec' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'audio_bitrate' => null,
        'audio_channels' => null,
        'audio_codec' => null,
        'audio_sample_rate' => null,
        'created_at' => 'datetime',
        'duration' => null,
        'encodings_count' => null,
        'error_class' => null,
        'error_message' => null,
        'extname' => null,
        'file_size' => null,
        'fps' => null,
        'height' => null,
        'width' => null,
        'mime_type' => null,
        'original_filename' => null,
        'path' => null,
        'payload' => null,
        'source_url' => null,
        'status' => null,
        'updated_at' => 'datetime',
        'video_bitrate' => null,
        'video_codec' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'audio_bitrate' => 'audio_bitrate',
        'audio_channels' => 'audio_channels',
        'audio_codec' => 'audio_codec',
        'audio_sample_rate' => 'audio_sample_rate',
        'created_at' => 'created_at',
        'duration' => 'duration',
        'encodings_count' => 'encodings_count',
        'error_class' => 'error_class',
        'error_message' => 'error_message',
        'extname' => 'extname',
        'file_size' => 'file_size',
        'fps' => 'fps',
        'height' => 'height',
        'width' => 'width',
        'mime_type' => 'mime_type',
        'original_filename' => 'original_filename',
        'path' => 'path',
        'payload' => 'payload',
        'source_url' => 'source_url',
        'status' => 'status',
        'updated_at' => 'updated_at',
        'video_bitrate' => 'video_bitrate',
        'video_codec' => 'video_codec'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'audio_bitrate' => 'setAudioBitrate',
        'audio_channels' => 'setAudioChannels',
        'audio_codec' => 'setAudioCodec',
        'audio_sample_rate' => 'setAudioSampleRate',
        'created_at' => 'setCreatedAt',
        'duration' => 'setDuration',
        'encodings_count' => 'setEncodingsCount',
        'error_class' => 'setErrorClass',
        'error_message' => 'setErrorMessage',
        'extname' => 'setExtname',
        'file_size' => 'setFileSize',
        'fps' => 'setFps',
        'height' => 'setHeight',
        'width' => 'setWidth',
        'mime_type' => 'setMimeType',
        'original_filename' => 'setOriginalFilename',
        'path' => 'setPath',
        'payload' => 'setPayload',
        'source_url' => 'setSourceUrl',
        'status' => 'setStatus',
        'updated_at' => 'setUpdatedAt',
        'video_bitrate' => 'setVideoBitrate',
        'video_codec' => 'setVideoCodec'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'audio_bitrate' => 'getAudioBitrate',
        'audio_channels' => 'getAudioChannels',
        'audio_codec' => 'getAudioCodec',
        'audio_sample_rate' => 'getAudioSampleRate',
        'created_at' => 'getCreatedAt',
        'duration' => 'getDuration',
        'encodings_count' => 'getEncodingsCount',
        'error_class' => 'getErrorClass',
        'error_message' => 'getErrorMessage',
        'extname' => 'getExtname',
        'file_size' => 'getFileSize',
        'fps' => 'getFps',
        'height' => 'getHeight',
        'width' => 'getWidth',
        'mime_type' => 'getMimeType',
        'original_filename' => 'getOriginalFilename',
        'path' => 'getPath',
        'payload' => 'getPayload',
        'source_url' => 'getSourceUrl',
        'status' => 'getStatus',
        'updated_at' => 'getUpdatedAt',
        'video_bitrate' => 'getVideoBitrate',
        'video_codec' => 'getVideoCodec'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['audio_bitrate'] = isset($data['audio_bitrate']) ? $data['audio_bitrate'] : null;
        $this->container['audio_channels'] = isset($data['audio_channels']) ? $data['audio_channels'] : null;
        $this->container['audio_codec'] = isset($data['audio_codec']) ? $data['audio_codec'] : null;
        $this->container['audio_sample_rate'] = isset($data['audio_sample_rate']) ? $data['audio_sample_rate'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['encodings_count'] = isset($data['encodings_count']) ? $data['encodings_count'] : null;
        $this->container['error_class'] = isset($data['error_class']) ? $data['error_class'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['extname'] = isset($data['extname']) ? $data['extname'] : null;
        $this->container['file_size'] = isset($data['file_size']) ? $data['file_size'] : null;
        $this->container['fps'] = isset($data['fps']) ? $data['fps'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['mime_type'] = isset($data['mime_type']) ? $data['mime_type'] : null;
        $this->container['original_filename'] = isset($data['original_filename']) ? $data['original_filename'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['payload'] = isset($data['payload']) ? $data['payload'] : null;
        $this->container['source_url'] = isset($data['source_url']) ? $data['source_url'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['video_bitrate'] = isset($data['video_bitrate']) ? $data['video_bitrate'] : null;
        $this->container['video_codec'] = isset($data['video_codec']) ? $data['video_codec'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id A unique identifier of the Video.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets audio_bitrate
     * @return int
     */
    public function getAudioBitrate()
    {
        return $this->container['audio_bitrate'];
    }

    /**
     * Sets audio_bitrate
     * @param int $audio_bitrate audio bitrate (in bits/s)
     * @return $this
     */
    public function setAudioBitrate($audio_bitrate)
    {
        $this->container['audio_bitrate'] = $audio_bitrate;

        return $this;
    }

    /**
     * Gets audio_channels
     * @return int
     */
    public function getAudioChannels()
    {
        return $this->container['audio_channels'];
    }

    /**
     * Sets audio_channels
     * @param int $audio_channels A number of audio channels.
     * @return $this
     */
    public function setAudioChannels($audio_channels)
    {
        $this->container['audio_channels'] = $audio_channels;

        return $this;
    }

    /**
     * Gets audio_codec
     * @return string
     */
    public function getAudioCodec()
    {
        return $this->container['audio_codec'];
    }

    /**
     * Sets audio_codec
     * @param string $audio_codec A codec that has been used to encode audio streams.
     * @return $this
     */
    public function setAudioCodec($audio_codec)
    {
        $this->container['audio_codec'] = $audio_codec;

        return $this;
    }

    /**
     * Gets audio_sample_rate
     * @return int
     */
    public function getAudioSampleRate()
    {
        return $this->container['audio_sample_rate'];
    }

    /**
     * Sets audio_sample_rate
     * @param int $audio_sample_rate A number of samples of audio carried per second.
     * @return $this
     */
    public function setAudioSampleRate($audio_sample_rate)
    {
        $this->container['audio_sample_rate'] = $audio_sample_rate;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at A date and time when the Video has been created.
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param int $duration A duration of the video in seconds.
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets encodings_count
     * @return int
     */
    public function getEncodingsCount()
    {
        return $this->container['encodings_count'];
    }

    /**
     * Sets encodings_count
     * @param int $encodings_count A number of related Encoding objects.
     * @return $this
     */
    public function setEncodingsCount($encodings_count)
    {
        $this->container['encodings_count'] = $encodings_count;

        return $this;
    }

    /**
     * Gets error_class
     * @return string
     */
    public function getErrorClass()
    {
        return $this->container['error_class'];
    }

    /**
     * Sets error_class
     * @param string $error_class A class of an error that has occurred during the encoding process. It is present only if the encoding status is equal to `fail`.
     * @return $this
     */
    public function setErrorClass($error_class)
    {
        $this->container['error_class'] = $error_class;

        return $this;
    }

    /**
     * Gets error_message
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     * @param string $error_message A message that explains why the encoding process has resulted in an error. It is present only if the encoding status is equal to `fail`.
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets extname
     * @return string
     */
    public function getExtname()
    {
        return $this->container['extname'];
    }

    /**
     * Sets extname
     * @param string $extname Extension of the source file.
     * @return $this
     */
    public function setExtname($extname)
    {
        $this->container['extname'] = $extname;

        return $this;
    }

    /**
     * Gets file_size
     * @return int
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     * @param int $file_size A size of the source file.
     * @return $this
     */
    public function setFileSize($file_size)
    {
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets fps
     * @return string
     */
    public function getFps()
    {
        return $this->container['fps'];
    }

    /**
     * Sets fps
     * @param string $fps Number of frames per second.
     * @return $this
     */
    public function setFps($fps)
    {
        $this->container['fps'] = $fps;

        return $this;
    }

    /**
     * Gets height
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param string $height Height of the output video.
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets width
     * @return string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     * @param string $width Width of the output video.
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets mime_type
     * @return string
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     * @param string $mime_type A mime type of the source file.
     * @return $this
     */
    public function setMimeType($mime_type)
    {
        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets original_filename
     * @return string
     */
    public function getOriginalFilename()
    {
        return $this->container['original_filename'];
    }

    /**
     * Sets original_filename
     * @param string $original_filename A name of the source file.
     * @return $this
     */
    public function setOriginalFilename($original_filename)
    {
        $this->container['original_filename'] = $original_filename;

        return $this;
    }

    /**
     * Gets path
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     * @param string $path
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets payload
     * @return string
     */
    public function getPayload()
    {
        return $this->container['payload'];
    }

    /**
     * Sets payload
     * @param string $payload
     * @return $this
     */
    public function setPayload($payload)
    {
        $this->container['payload'] = $payload;

        return $this;
    }

    /**
     * Gets source_url
     * @return string
     */
    public function getSourceUrl()
    {
        return $this->container['source_url'];
    }

    /**
     * Sets source_url
     * @param string $source_url An URL pointing to the source file.
     * @return $this
     */
    public function setSourceUrl($source_url)
    {
        $this->container['source_url'] = $source_url;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Determines at what stage of importing process the Video is at the moment.
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at A date and time when a Video has been updated last time.
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets video_bitrate
     * @return string
     */
    public function getVideoBitrate()
    {
        return $this->container['video_bitrate'];
    }

    /**
     * Sets video_bitrate
     * @param string $video_bitrate video bitrate (in bits/s)
     * @return $this
     */
    public function setVideoBitrate($video_bitrate)
    {
        $this->container['video_bitrate'] = $video_bitrate;

        return $this;
    }

    /**
     * Gets video_codec
     * @return string
     */
    public function getVideoCodec()
    {
        return $this->container['video_codec'];
    }

    /**
     * Sets video_codec
     * @param string $video_codec A codec that has been used to encode the input file's video streams.
     * @return $this
     */
    public function setVideoCodec($video_codec)
    {
        $this->container['video_codec'] = $video_codec;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TelestreamCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TelestreamCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


