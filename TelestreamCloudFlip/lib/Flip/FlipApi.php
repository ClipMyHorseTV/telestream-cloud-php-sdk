<?php
/**
 * FlipApi
 * PHP version 5
 *
 * @category Class
 * @package  TelestreamCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flip API
 *
 * Description
 *
 * OpenAPI spec version: 3.1.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TelestreamCloud\Flip;

use \TelestreamCloud\ApiClient;
use \TelestreamCloud\ApiException;
use \TelestreamCloud\Configuration;
use \TelestreamCloud\ObjectSerializer;

/**
 * FlipApi Class Doc Comment
 *
 * @category Class
 * @package  TelestreamCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlipApi
{
    /**
     * API Client
     *
     * @var \TelestreamCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \TelestreamCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\TelestreamCloud\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \TelestreamCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \TelestreamCloud\ApiClient $apiClient set the API client
     *
     * @return FlipApi
     */
    public function setApiClient(\TelestreamCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation cancelEncoding
     *
     * Cancels an Encoding.
     *
     * @param string $id Id of an Encoding. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\CanceledResponse
     */
    public function cancelEncoding($id, $factory_id)
    {
        list($response) = $this->cancelEncodingWithHttpInfo($id, $factory_id);
        return $response;
    }

    /**
     * Operation cancelEncodingWithHttpInfo
     *
     * Cancels an Encoding.
     *
     * @param string $id Id of an Encoding. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\CanceledResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelEncodingWithHttpInfo($id, $factory_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling cancelEncoding');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling cancelEncoding');
        }
        // parse inputs
        $resourcePath = "/encodings/{id}/cancel.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\CanceledResponse',
                '/encodings/{id}/cancel.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\CanceledResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\CanceledResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation copyProfile
     *
     * Copies a given Profile
     *
     * @param string $id Id of a Profile. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\CopyProfileBody $copy_profile_body  (required)
     * @param bool $expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\Profile
     */
    public function copyProfile($id, $factory_id, $copy_profile_body, $expand = null)
    {
        list($response) = $this->copyProfileWithHttpInfo($id, $factory_id, $copy_profile_body, $expand);
        return $response;
    }

    /**
     * Operation copyProfileWithHttpInfo
     *
     * Copies a given Profile
     *
     * @param string $id Id of a Profile. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\CopyProfileBody $copy_profile_body  (required)
     * @param bool $expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\Profile, HTTP status code, HTTP response headers (array of strings)
     */
    public function copyProfileWithHttpInfo($id, $factory_id, $copy_profile_body, $expand = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling copyProfile');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling copyProfile');
        }
        // verify the required parameter 'copy_profile_body' is set
        if ($copy_profile_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $copy_profile_body when calling copyProfile');
        }
        // parse inputs
        $resourcePath = "/profiles/{id}/copy.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // query params
        if ($expand !== null) {
            $queryParams['expand'] = $this->apiClient->getSerializer()->toQueryValue($expand);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($copy_profile_body)) {
            $_tempBody = $copy_profile_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\Profile',
                '/profiles/{id}/copy.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\Profile', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createEncoding
     *
     * Creates an Encoding
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\CreateEncodingBody $create_encoding_body  (required)
     * @param bool $screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param bool $precise_status Determines whether the response will include a precise status. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\Encoding
     */
    public function createEncoding($factory_id, $create_encoding_body, $screenshots = null, $precise_status = null)
    {
        list($response) = $this->createEncodingWithHttpInfo($factory_id, $create_encoding_body, $screenshots, $precise_status);
        return $response;
    }

    /**
     * Operation createEncodingWithHttpInfo
     *
     * Creates an Encoding
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\CreateEncodingBody $create_encoding_body  (required)
     * @param bool $screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param bool $precise_status Determines whether the response will include a precise status. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\Encoding, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEncodingWithHttpInfo($factory_id, $create_encoding_body, $screenshots = null, $precise_status = null)
    {
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling createEncoding');
        }
        // verify the required parameter 'create_encoding_body' is set
        if ($create_encoding_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_encoding_body when calling createEncoding');
        }
        // parse inputs
        $resourcePath = "/encodings.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // query params
        if ($screenshots !== null) {
            $queryParams['screenshots'] = $this->apiClient->getSerializer()->toQueryValue($screenshots);
        }
        // query params
        if ($precise_status !== null) {
            $queryParams['precise_status'] = $this->apiClient->getSerializer()->toQueryValue($precise_status);
        }
        // body params
        $_tempBody = null;
        if (isset($create_encoding_body)) {
            $_tempBody = $create_encoding_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\Encoding',
                '/encodings.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\Encoding', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Encoding', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createFactory
     *
     * Creates a new factory
     *
     * @param \TelestreamCloud\Flip\FactoryBody $create_factory_body  (required)
     * @param bool $with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\Factory
     */
    public function createFactory($create_factory_body, $with_storage_provider = null)
    {
        list($response) = $this->createFactoryWithHttpInfo($create_factory_body, $with_storage_provider);
        return $response;
    }

    /**
     * Operation createFactoryWithHttpInfo
     *
     * Creates a new factory
     *
     * @param \TelestreamCloud\Flip\FactoryBody $create_factory_body  (required)
     * @param bool $with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\Factory, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFactoryWithHttpInfo($create_factory_body, $with_storage_provider = null)
    {
        // verify the required parameter 'create_factory_body' is set
        if ($create_factory_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_factory_body when calling createFactory');
        }
        // parse inputs
        $resourcePath = "/factories.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($with_storage_provider !== null) {
            $queryParams['with_storage_provider'] = $this->apiClient->getSerializer()->toQueryValue($with_storage_provider);
        }
        // body params
        $_tempBody = null;
        if (isset($create_factory_body)) {
            $_tempBody = $create_factory_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\Factory',
                '/factories.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\Factory', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Factory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProfile
     *
     * Creates a Profile
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\ProfileBody $create_profile_body  (required)
     * @param bool $exclude_advanced_services  (optional)
     * @param bool $expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\Profile
     */
    public function createProfile($factory_id, $create_profile_body, $exclude_advanced_services = null, $expand = null)
    {
        list($response) = $this->createProfileWithHttpInfo($factory_id, $create_profile_body, $exclude_advanced_services, $expand);
        return $response;
    }

    /**
     * Operation createProfileWithHttpInfo
     *
     * Creates a Profile
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\ProfileBody $create_profile_body  (required)
     * @param bool $exclude_advanced_services  (optional)
     * @param bool $expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\Profile, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProfileWithHttpInfo($factory_id, $create_profile_body, $exclude_advanced_services = null, $expand = null)
    {
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling createProfile');
        }
        // verify the required parameter 'create_profile_body' is set
        if ($create_profile_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_profile_body when calling createProfile');
        }
        // parse inputs
        $resourcePath = "/profiles.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // query params
        if ($exclude_advanced_services !== null) {
            $queryParams['exclude_advanced_services'] = $this->apiClient->getSerializer()->toQueryValue($exclude_advanced_services);
        }
        // query params
        if ($expand !== null) {
            $queryParams['expand'] = $this->apiClient->getSerializer()->toQueryValue($expand);
        }
        // body params
        $_tempBody = null;
        if (isset($create_profile_body)) {
            $_tempBody = $create_profile_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\Profile',
                '/profiles.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\Profile', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createWorkorder
     *
     * Creates a Workorder.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param string $profile_id Id of a Profile. (optional)
     * @param \SplFileObject $file Input file. (optional)
     * @param string $source_url URL pointing to an input file. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return void
     */
    public function createWorkorder($factory_id, $profile_id = null, $file = null, $source_url = null)
    {
        list($response) = $this->createWorkorderWithHttpInfo($factory_id, $profile_id, $file, $source_url);
        return $response;
    }

    /**
     * Operation createWorkorderWithHttpInfo
     *
     * Creates a Workorder.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param string $profile_id Id of a Profile. (optional)
     * @param \SplFileObject $file Input file. (optional)
     * @param string $source_url URL pointing to an input file. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkorderWithHttpInfo($factory_id, $profile_id = null, $file = null, $source_url = null)
    {
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling createWorkorder');
        }
        // parse inputs
        $resourcePath = "/workorders.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // form params
        if ($profile_id !== null) {
            $formParams['profile_id'] = $this->apiClient->getSerializer()->toFormValue($profile_id);
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }
        // form params
        if ($source_url !== null) {
            $formParams['source_url'] = $this->apiClient->getSerializer()->toFormValue($source_url);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/workorders.json'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteEncoding
     *
     * Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful.
     *
     * @param string $id Id of an Encoding. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\DeletedResponse
     */
    public function deleteEncoding($id, $factory_id)
    {
        list($response) = $this->deleteEncodingWithHttpInfo($id, $factory_id);
        return $response;
    }

    /**
     * Operation deleteEncodingWithHttpInfo
     *
     * Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful.
     *
     * @param string $id Id of an Encoding. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\DeletedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEncodingWithHttpInfo($id, $factory_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteEncoding');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling deleteEncoding');
        }
        // parse inputs
        $resourcePath = "/encodings/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\DeletedResponse',
                '/encodings/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\DeletedResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\DeletedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProfile
     *
     * Deletes a given Profile
     *
     * @param string $id Id of a Profile (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\DeletedResponse
     */
    public function deleteProfile($id, $factory_id)
    {
        list($response) = $this->deleteProfileWithHttpInfo($id, $factory_id);
        return $response;
    }

    /**
     * Operation deleteProfileWithHttpInfo
     *
     * Deletes a given Profile
     *
     * @param string $id Id of a Profile (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\DeletedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProfileWithHttpInfo($id, $factory_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteProfile');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling deleteProfile');
        }
        // parse inputs
        $resourcePath = "/profiles/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\DeletedResponse',
                '/profiles/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\DeletedResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\DeletedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteVideo
     *
     * Deletes a Video object.
     *
     * @param string $id Id of a Video. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\DeletedResponse
     */
    public function deleteVideo($id, $factory_id)
    {
        list($response) = $this->deleteVideoWithHttpInfo($id, $factory_id);
        return $response;
    }

    /**
     * Operation deleteVideoWithHttpInfo
     *
     * Deletes a Video object.
     *
     * @param string $id Id of a Video. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\DeletedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVideoWithHttpInfo($id, $factory_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteVideo');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling deleteVideo');
        }
        // parse inputs
        $resourcePath = "/videos/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\DeletedResponse',
                '/videos/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\DeletedResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\DeletedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteVideoSource
     *
     * Delete a video's source file.
     *
     * @param string $id Id of a Video. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\DeletedResponse
     */
    public function deleteVideoSource($id, $factory_id)
    {
        list($response) = $this->deleteVideoSourceWithHttpInfo($id, $factory_id);
        return $response;
    }

    /**
     * Operation deleteVideoSourceWithHttpInfo
     *
     * Delete a video's source file.
     *
     * @param string $id Id of a Video. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\DeletedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVideoSourceWithHttpInfo($id, $factory_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteVideoSource');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling deleteVideoSource');
        }
        // parse inputs
        $resourcePath = "/videos/{id}/source.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\DeletedResponse',
                '/videos/{id}/source.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\DeletedResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\DeletedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation encoding
     *
     * Returns an Encoding object.
     *
     * @param string $id Id of an Encoding. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @param bool $screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param bool $precise_status Determines whether the response will include a precise status. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\Encoding
     */
    public function encoding($id, $factory_id, $screenshots = null, $precise_status = null)
    {
        list($response) = $this->encodingWithHttpInfo($id, $factory_id, $screenshots, $precise_status);
        return $response;
    }

    /**
     * Operation encodingWithHttpInfo
     *
     * Returns an Encoding object.
     *
     * @param string $id Id of an Encoding. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @param bool $screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param bool $precise_status Determines whether the response will include a precise status. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\Encoding, HTTP status code, HTTP response headers (array of strings)
     */
    public function encodingWithHttpInfo($id, $factory_id, $screenshots = null, $precise_status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling encoding');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling encoding');
        }
        // parse inputs
        $resourcePath = "/encodings/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // query params
        if ($screenshots !== null) {
            $queryParams['screenshots'] = $this->apiClient->getSerializer()->toQueryValue($screenshots);
        }
        // query params
        if ($precise_status !== null) {
            $queryParams['precise_status'] = $this->apiClient->getSerializer()->toQueryValue($precise_status);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\Encoding',
                '/encodings/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\Encoding', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Encoding', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation encodings
     *
     * Returns a list of Encoding objects
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param string $video_id Id of a Video. When specified, the resulting list will contain videos that belong to the Video. (optional)
     * @param string $status One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status. (optional)
     * @param string $profile_id Filter by profile_id. (optional)
     * @param string $profile_name Filter by profile_name. (optional)
     * @param int $page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param int $per_page A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param bool $screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param bool $precise_status Determines whether the response will include a precise status. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\PaginatedEncodingsCollection
     */
    public function encodings($factory_id, $video_id = null, $status = null, $profile_id = null, $profile_name = null, $page = null, $per_page = null, $screenshots = null, $precise_status = null)
    {
        list($response) = $this->encodingsWithHttpInfo($factory_id, $video_id, $status, $profile_id, $profile_name, $page, $per_page, $screenshots, $precise_status);
        return $response;
    }

    /**
     * Operation encodingsWithHttpInfo
     *
     * Returns a list of Encoding objects
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param string $video_id Id of a Video. When specified, the resulting list will contain videos that belong to the Video. (optional)
     * @param string $status One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status. (optional)
     * @param string $profile_id Filter by profile_id. (optional)
     * @param string $profile_name Filter by profile_name. (optional)
     * @param int $page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param int $per_page A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param bool $screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param bool $precise_status Determines whether the response will include a precise status. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\PaginatedEncodingsCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function encodingsWithHttpInfo($factory_id, $video_id = null, $status = null, $profile_id = null, $profile_name = null, $page = null, $per_page = null, $screenshots = null, $precise_status = null)
    {
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling encodings');
        }
        // parse inputs
        $resourcePath = "/encodings.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // query params
        if ($video_id !== null) {
            $queryParams['video_id'] = $this->apiClient->getSerializer()->toQueryValue($video_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($profile_id !== null) {
            $queryParams['profile_id'] = $this->apiClient->getSerializer()->toQueryValue($profile_id);
        }
        // query params
        if ($profile_name !== null) {
            $queryParams['profile_name'] = $this->apiClient->getSerializer()->toQueryValue($profile_name);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }
        // query params
        if ($screenshots !== null) {
            $queryParams['screenshots'] = $this->apiClient->getSerializer()->toQueryValue($screenshots);
        }
        // query params
        if ($precise_status !== null) {
            $queryParams['precise_status'] = $this->apiClient->getSerializer()->toQueryValue($precise_status);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\PaginatedEncodingsCollection',
                '/encodings.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\PaginatedEncodingsCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\PaginatedEncodingsCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation encodingsCount
     *
     * Returns a number of Encoding objects created using a given factory.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\CountResponse
     */
    public function encodingsCount($factory_id)
    {
        list($response) = $this->encodingsCountWithHttpInfo($factory_id);
        return $response;
    }

    /**
     * Operation encodingsCountWithHttpInfo
     *
     * Returns a number of Encoding objects created using a given factory.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\CountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function encodingsCountWithHttpInfo($factory_id)
    {
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling encodingsCount');
        }
        // parse inputs
        $resourcePath = "/encodings/count.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\CountResponse',
                '/encodings/count.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\CountResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\CountResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation factories
     *
     * Returns a collection of Factory objects.
     *
     * @param int $page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param int $per_page A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param bool $with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\PaginatedFactoryCollection
     */
    public function factories($page = null, $per_page = null, $with_storage_provider = null)
    {
        list($response) = $this->factoriesWithHttpInfo($page, $per_page, $with_storage_provider);
        return $response;
    }

    /**
     * Operation factoriesWithHttpInfo
     *
     * Returns a collection of Factory objects.
     *
     * @param int $page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param int $per_page A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param bool $with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\PaginatedFactoryCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function factoriesWithHttpInfo($page = null, $per_page = null, $with_storage_provider = null)
    {
        // parse inputs
        $resourcePath = "/factories.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }
        // query params
        if ($with_storage_provider !== null) {
            $queryParams['with_storage_provider'] = $this->apiClient->getSerializer()->toQueryValue($with_storage_provider);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\PaginatedFactoryCollection',
                '/factories.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\PaginatedFactoryCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\PaginatedFactoryCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation factory
     *
     * Returns a Factory object.
     *
     * @param string $id id of a factory (required)
     * @param bool $with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\Factory
     */
    public function factory($id, $with_storage_provider = null)
    {
        list($response) = $this->factoryWithHttpInfo($id, $with_storage_provider);
        return $response;
    }

    /**
     * Operation factoryWithHttpInfo
     *
     * Returns a Factory object.
     *
     * @param string $id id of a factory (required)
     * @param bool $with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\Factory, HTTP status code, HTTP response headers (array of strings)
     */
    public function factoryWithHttpInfo($id, $with_storage_provider = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling factory');
        }
        // parse inputs
        $resourcePath = "/factories/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($with_storage_provider !== null) {
            $queryParams['with_storage_provider'] = $this->apiClient->getSerializer()->toQueryValue($with_storage_provider);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\Factory',
                '/factories/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\Factory', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Factory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation notifications
     *
     * Returns a Factory's notification settings.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\CloudNotificationSettings
     */
    public function notifications($factory_id)
    {
        list($response) = $this->notificationsWithHttpInfo($factory_id);
        return $response;
    }

    /**
     * Operation notificationsWithHttpInfo
     *
     * Returns a Factory's notification settings.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\CloudNotificationSettings, HTTP status code, HTTP response headers (array of strings)
     */
    public function notificationsWithHttpInfo($factory_id)
    {
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling notifications');
        }
        // parse inputs
        $resourcePath = "/notifications.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\CloudNotificationSettings',
                '/notifications.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\CloudNotificationSettings', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\CloudNotificationSettings', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profile
     *
     * Returns a Profile object.
     *
     * @param string $id_or_name A name or an id of a Profile. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @param bool $expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\Profile
     */
    public function profile($id_or_name, $factory_id, $expand = null)
    {
        list($response) = $this->profileWithHttpInfo($id_or_name, $factory_id, $expand);
        return $response;
    }

    /**
     * Operation profileWithHttpInfo
     *
     * Returns a Profile object.
     *
     * @param string $id_or_name A name or an id of a Profile. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @param bool $expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\Profile, HTTP status code, HTTP response headers (array of strings)
     */
    public function profileWithHttpInfo($id_or_name, $factory_id, $expand = null)
    {
        // verify the required parameter 'id_or_name' is set
        if ($id_or_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_or_name when calling profile');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling profile');
        }
        // parse inputs
        $resourcePath = "/profiles/{id_or_name}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // query params
        if ($expand !== null) {
            $queryParams['expand'] = $this->apiClient->getSerializer()->toQueryValue($expand);
        }
        // path params
        if ($id_or_name !== null) {
            $resourcePath = str_replace(
                "{" . "id_or_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_or_name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\Profile',
                '/profiles/{id_or_name}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\Profile', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profileEncodings
     *
     * Returns a list of Encodings that belong to a Profile.
     *
     * @param string $id_or_name Id or name of a Profile. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\PaginatedEncodingsCollection
     */
    public function profileEncodings($id_or_name, $factory_id)
    {
        list($response) = $this->profileEncodingsWithHttpInfo($id_or_name, $factory_id);
        return $response;
    }

    /**
     * Operation profileEncodingsWithHttpInfo
     *
     * Returns a list of Encodings that belong to a Profile.
     *
     * @param string $id_or_name Id or name of a Profile. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\PaginatedEncodingsCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function profileEncodingsWithHttpInfo($id_or_name, $factory_id)
    {
        // verify the required parameter 'id_or_name' is set
        if ($id_or_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_or_name when calling profileEncodings');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling profileEncodings');
        }
        // parse inputs
        $resourcePath = "/profiles/{id_or_name}/encodings.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // path params
        if ($id_or_name !== null) {
            $resourcePath = str_replace(
                "{" . "id_or_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_or_name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\PaginatedEncodingsCollection',
                '/profiles/{id_or_name}/encodings.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\PaginatedEncodingsCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\PaginatedEncodingsCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profiles
     *
     * Returns a collection of Profile objects.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param bool $exclude_advanced_services Determine whether exclude Advanced Services profiles from the results. By default this is not set. (optional)
     * @param bool $expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @param int $page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param int $per_page A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\PaginatedProfilesCollection
     */
    public function profiles($factory_id, $exclude_advanced_services = null, $expand = null, $page = null, $per_page = null)
    {
        list($response) = $this->profilesWithHttpInfo($factory_id, $exclude_advanced_services, $expand, $page, $per_page);
        return $response;
    }

    /**
     * Operation profilesWithHttpInfo
     *
     * Returns a collection of Profile objects.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param bool $exclude_advanced_services Determine whether exclude Advanced Services profiles from the results. By default this is not set. (optional)
     * @param bool $expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @param int $page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param int $per_page A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\PaginatedProfilesCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function profilesWithHttpInfo($factory_id, $exclude_advanced_services = null, $expand = null, $page = null, $per_page = null)
    {
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling profiles');
        }
        // parse inputs
        $resourcePath = "/profiles.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // query params
        if ($exclude_advanced_services !== null) {
            $queryParams['exclude_advanced_services'] = $this->apiClient->getSerializer()->toQueryValue($exclude_advanced_services);
        }
        // query params
        if ($expand !== null) {
            $queryParams['expand'] = $this->apiClient->getSerializer()->toQueryValue($expand);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\PaginatedProfilesCollection',
                '/profiles.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\PaginatedProfilesCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\PaginatedProfilesCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation queuedVideos
     *
     * Returns a collection of Video objects queued for encoding.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param int $page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param int $per_page A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\PaginatedVideoCollection
     */
    public function queuedVideos($factory_id, $page = null, $per_page = null)
    {
        list($response) = $this->queuedVideosWithHttpInfo($factory_id, $page, $per_page);
        return $response;
    }

    /**
     * Operation queuedVideosWithHttpInfo
     *
     * Returns a collection of Video objects queued for encoding.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param int $page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param int $per_page A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\PaginatedVideoCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function queuedVideosWithHttpInfo($factory_id, $page = null, $per_page = null)
    {
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling queuedVideos');
        }
        // parse inputs
        $resourcePath = "/videos/queued.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\PaginatedVideoCollection',
                '/videos/queued.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\PaginatedVideoCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\PaginatedVideoCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resubmitVideo
     *
     * Resubmits a video to encode.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\ResubmitVideoBody $resubmit_video_body  (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return void
     */
    public function resubmitVideo($factory_id, $resubmit_video_body)
    {
        list($response) = $this->resubmitVideoWithHttpInfo($factory_id, $resubmit_video_body);
        return $response;
    }

    /**
     * Operation resubmitVideoWithHttpInfo
     *
     * Resubmits a video to encode.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\ResubmitVideoBody $resubmit_video_body  (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resubmitVideoWithHttpInfo($factory_id, $resubmit_video_body)
    {
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling resubmitVideo');
        }
        // verify the required parameter 'resubmit_video_body' is set
        if ($resubmit_video_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $resubmit_video_body when calling resubmitVideo');
        }
        // parse inputs
        $resourcePath = "/videos/resubmit.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // body params
        $_tempBody = null;
        if (isset($resubmit_video_body)) {
            $_tempBody = $resubmit_video_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/videos/resubmit.json'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retryEncoding
     *
     * Retries a failed encoding.
     *
     * @param string $id Id of an Encoding. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\RetriedResponse
     */
    public function retryEncoding($id, $factory_id)
    {
        list($response) = $this->retryEncodingWithHttpInfo($id, $factory_id);
        return $response;
    }

    /**
     * Operation retryEncodingWithHttpInfo
     *
     * Retries a failed encoding.
     *
     * @param string $id Id of an Encoding. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\RetriedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retryEncodingWithHttpInfo($id, $factory_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling retryEncoding');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling retryEncoding');
        }
        // parse inputs
        $resourcePath = "/encodings/{id}/retry.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\RetriedResponse',
                '/encodings/{id}/retry.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\RetriedResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\RetriedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation signedEncodingUrl
     *
     * Returns a signed url pointing to an Encoding.
     *
     * @param string $id Id of an Encoding. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\EncodingSignedUrl
     */
    public function signedEncodingUrl($id, $factory_id)
    {
        list($response) = $this->signedEncodingUrlWithHttpInfo($id, $factory_id);
        return $response;
    }

    /**
     * Operation signedEncodingUrlWithHttpInfo
     *
     * Returns a signed url pointing to an Encoding.
     *
     * @param string $id Id of an Encoding. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\EncodingSignedUrl, HTTP status code, HTTP response headers (array of strings)
     */
    public function signedEncodingUrlWithHttpInfo($id, $factory_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling signedEncodingUrl');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling signedEncodingUrl');
        }
        // parse inputs
        $resourcePath = "/encodings/{id}/signed-url.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\EncodingSignedUrl',
                '/encodings/{id}/signed-url.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\EncodingSignedUrl', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\EncodingSignedUrl', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation signedEncodingUrls
     *
     * Returns a list of signed urls pointing to an Encoding's outputs.
     *
     * @param string $id Id of an Encoding. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\EncodingSignedUrls
     */
    public function signedEncodingUrls($id, $factory_id)
    {
        list($response) = $this->signedEncodingUrlsWithHttpInfo($id, $factory_id);
        return $response;
    }

    /**
     * Operation signedEncodingUrlsWithHttpInfo
     *
     * Returns a list of signed urls pointing to an Encoding's outputs.
     *
     * @param string $id Id of an Encoding. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\EncodingSignedUrls, HTTP status code, HTTP response headers (array of strings)
     */
    public function signedEncodingUrlsWithHttpInfo($id, $factory_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling signedEncodingUrls');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling signedEncodingUrls');
        }
        // parse inputs
        $resourcePath = "/encodings/{id}/signed-urls.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\EncodingSignedUrls',
                '/encodings/{id}/signed-urls.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\EncodingSignedUrls', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\EncodingSignedUrls', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation signedVideoUrl
     *
     * Returns a signed url pointing to a Video.
     *
     * @param string $id Id of a Video. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\SignedVideoUrl
     */
    public function signedVideoUrl($id, $factory_id)
    {
        list($response) = $this->signedVideoUrlWithHttpInfo($id, $factory_id);
        return $response;
    }

    /**
     * Operation signedVideoUrlWithHttpInfo
     *
     * Returns a signed url pointing to a Video.
     *
     * @param string $id Id of a Video. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\SignedVideoUrl, HTTP status code, HTTP response headers (array of strings)
     */
    public function signedVideoUrlWithHttpInfo($id, $factory_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling signedVideoUrl');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling signedVideoUrl');
        }
        // parse inputs
        $resourcePath = "/videos/{id}/signed-url.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\SignedVideoUrl',
                '/videos/{id}/signed-url.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\SignedVideoUrl', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\SignedVideoUrl', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation toggleFactorySync
     *
     * Toggles synchronisation settings.
     *
     * @param string $id id of the factory (required)
     * @param \TelestreamCloud\Flip\FactorySyncBody $factory_sync_body  (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\FactorySync
     */
    public function toggleFactorySync($id, $factory_sync_body)
    {
        list($response) = $this->toggleFactorySyncWithHttpInfo($id, $factory_sync_body);
        return $response;
    }

    /**
     * Operation toggleFactorySyncWithHttpInfo
     *
     * Toggles synchronisation settings.
     *
     * @param string $id id of the factory (required)
     * @param \TelestreamCloud\Flip\FactorySyncBody $factory_sync_body  (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\FactorySync, HTTP status code, HTTP response headers (array of strings)
     */
    public function toggleFactorySyncWithHttpInfo($id, $factory_sync_body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling toggleFactorySync');
        }
        // verify the required parameter 'factory_sync_body' is set
        if ($factory_sync_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_sync_body when calling toggleFactorySync');
        }
        // parse inputs
        $resourcePath = "/factories/{id}/sync.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($factory_sync_body)) {
            $_tempBody = $factory_sync_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\FactorySync',
                '/factories/{id}/sync.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\FactorySync', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\FactorySync', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateEncoding
     *
     * Updates an Encoding
     *
     * @param string $id Id of an Encoding. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\UpdateEncodingBody $update_encoding_body  (required)
     * @param bool $screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param bool $precise_status Determines whether the response will include a precise status. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\Encoding
     */
    public function updateEncoding($id, $factory_id, $update_encoding_body, $screenshots = null, $precise_status = null)
    {
        list($response) = $this->updateEncodingWithHttpInfo($id, $factory_id, $update_encoding_body, $screenshots, $precise_status);
        return $response;
    }

    /**
     * Operation updateEncodingWithHttpInfo
     *
     * Updates an Encoding
     *
     * @param string $id Id of an Encoding. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\UpdateEncodingBody $update_encoding_body  (required)
     * @param bool $screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param bool $precise_status Determines whether the response will include a precise status. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\Encoding, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEncodingWithHttpInfo($id, $factory_id, $update_encoding_body, $screenshots = null, $precise_status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateEncoding');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling updateEncoding');
        }
        // verify the required parameter 'update_encoding_body' is set
        if ($update_encoding_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_encoding_body when calling updateEncoding');
        }
        // parse inputs
        $resourcePath = "/encodings/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // query params
        if ($screenshots !== null) {
            $queryParams['screenshots'] = $this->apiClient->getSerializer()->toQueryValue($screenshots);
        }
        // query params
        if ($precise_status !== null) {
            $queryParams['precise_status'] = $this->apiClient->getSerializer()->toQueryValue($precise_status);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($update_encoding_body)) {
            $_tempBody = $update_encoding_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\Encoding',
                '/encodings/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\Encoding', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Encoding', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateFactory
     *
     * Updates a Factory's settings. Returns a Factory object.
     *
     * @param string $id id of the factory (required)
     * @param \TelestreamCloud\Flip\FactoryBody $update_factory_body  (required)
     * @param bool $with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\Factory
     */
    public function updateFactory($id, $update_factory_body, $with_storage_provider = null)
    {
        list($response) = $this->updateFactoryWithHttpInfo($id, $update_factory_body, $with_storage_provider);
        return $response;
    }

    /**
     * Operation updateFactoryWithHttpInfo
     *
     * Updates a Factory's settings. Returns a Factory object.
     *
     * @param string $id id of the factory (required)
     * @param \TelestreamCloud\Flip\FactoryBody $update_factory_body  (required)
     * @param bool $with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\Factory, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFactoryWithHttpInfo($id, $update_factory_body, $with_storage_provider = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateFactory');
        }
        // verify the required parameter 'update_factory_body' is set
        if ($update_factory_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_factory_body when calling updateFactory');
        }
        // parse inputs
        $resourcePath = "/factories/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($with_storage_provider !== null) {
            $queryParams['with_storage_provider'] = $this->apiClient->getSerializer()->toQueryValue($with_storage_provider);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($update_factory_body)) {
            $_tempBody = $update_factory_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\Factory',
                '/factories/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\Factory', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Factory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateNotifications
     *
     * Updates a Factory's notification settings.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\CloudNotificationSettings $cloud_notification_settings_body  (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\CloudNotificationSettings
     */
    public function updateNotifications($factory_id, $cloud_notification_settings_body)
    {
        list($response) = $this->updateNotificationsWithHttpInfo($factory_id, $cloud_notification_settings_body);
        return $response;
    }

    /**
     * Operation updateNotificationsWithHttpInfo
     *
     * Updates a Factory's notification settings.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\CloudNotificationSettings $cloud_notification_settings_body  (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\CloudNotificationSettings, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNotificationsWithHttpInfo($factory_id, $cloud_notification_settings_body)
    {
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling updateNotifications');
        }
        // verify the required parameter 'cloud_notification_settings_body' is set
        if ($cloud_notification_settings_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cloud_notification_settings_body when calling updateNotifications');
        }
        // parse inputs
        $resourcePath = "/notifications.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // body params
        $_tempBody = null;
        if (isset($cloud_notification_settings_body)) {
            $_tempBody = $cloud_notification_settings_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\CloudNotificationSettings',
                '/notifications.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\CloudNotificationSettings', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\CloudNotificationSettings', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateProfile
     *
     * Updates a given Profile
     *
     * @param string $id  (required)
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\ProfileBody $update_profile_body  (required)
     * @param bool $exclude_advanced_services  (optional)
     * @param bool $expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\Profile
     */
    public function updateProfile($id, $factory_id, $update_profile_body, $exclude_advanced_services = null, $expand = null)
    {
        list($response) = $this->updateProfileWithHttpInfo($id, $factory_id, $update_profile_body, $exclude_advanced_services, $expand);
        return $response;
    }

    /**
     * Operation updateProfileWithHttpInfo
     *
     * Updates a given Profile
     *
     * @param string $id  (required)
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\ProfileBody $update_profile_body  (required)
     * @param bool $exclude_advanced_services  (optional)
     * @param bool $expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\Profile, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProfileWithHttpInfo($id, $factory_id, $update_profile_body, $exclude_advanced_services = null, $expand = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateProfile');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling updateProfile');
        }
        // verify the required parameter 'update_profile_body' is set
        if ($update_profile_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_profile_body when calling updateProfile');
        }
        // parse inputs
        $resourcePath = "/profiles/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // query params
        if ($exclude_advanced_services !== null) {
            $queryParams['exclude_advanced_services'] = $this->apiClient->getSerializer()->toQueryValue($exclude_advanced_services);
        }
        // query params
        if ($expand !== null) {
            $queryParams['expand'] = $this->apiClient->getSerializer()->toQueryValue($expand);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($update_profile_body)) {
            $_tempBody = $update_profile_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\Profile',
                '/profiles/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\Profile', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation uploadVideo
     *
     * Creates an upload session.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\VideoUploadBody $video_upload_body  (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\UploadSession
     */
    public function uploadVideo($factory_id, $video_upload_body)
    {
        list($response) = $this->uploadVideoWithHttpInfo($factory_id, $video_upload_body);
        return $response;
    }

    /**
     * Operation uploadVideoWithHttpInfo
     *
     * Creates an upload session.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param \TelestreamCloud\Flip\VideoUploadBody $video_upload_body  (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\UploadSession, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadVideoWithHttpInfo($factory_id, $video_upload_body)
    {
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling uploadVideo');
        }
        // verify the required parameter 'video_upload_body' is set
        if ($video_upload_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $video_upload_body when calling uploadVideo');
        }
        // parse inputs
        $resourcePath = "/videos/upload.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // body params
        $_tempBody = null;
        if (isset($video_upload_body)) {
            $_tempBody = $video_upload_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\UploadSession',
                '/videos/upload.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\UploadSession', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\UploadSession', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation video
     *
     * Returns a Video object.
     *
     * @param string $id Id of a Video. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\Video
     */
    public function video($id, $factory_id)
    {
        list($response) = $this->videoWithHttpInfo($id, $factory_id);
        return $response;
    }

    /**
     * Operation videoWithHttpInfo
     *
     * Returns a Video object.
     *
     * @param string $id Id of a Video. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\Video, HTTP status code, HTTP response headers (array of strings)
     */
    public function videoWithHttpInfo($id, $factory_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling video');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling video');
        }
        // parse inputs
        $resourcePath = "/videos/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\Video',
                '/videos/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\Video', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Video', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation videoEncodings
     *
     * Returns a list of Encodings that belong to a Video.
     *
     * @param string $id Id of a Video. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @param int $page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param int $per_page A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param bool $screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param bool $precise_status Determines whether the response will include a precise status. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\PaginatedEncodingsCollection
     */
    public function videoEncodings($id, $factory_id, $page = null, $per_page = null, $screenshots = null, $precise_status = null)
    {
        list($response) = $this->videoEncodingsWithHttpInfo($id, $factory_id, $page, $per_page, $screenshots, $precise_status);
        return $response;
    }

    /**
     * Operation videoEncodingsWithHttpInfo
     *
     * Returns a list of Encodings that belong to a Video.
     *
     * @param string $id Id of a Video. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @param int $page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param int $per_page A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param bool $screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param bool $precise_status Determines whether the response will include a precise status. By default this is not set. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\PaginatedEncodingsCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function videoEncodingsWithHttpInfo($id, $factory_id, $page = null, $per_page = null, $screenshots = null, $precise_status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling videoEncodings');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling videoEncodings');
        }
        // parse inputs
        $resourcePath = "/videos/{id}/encodings.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }
        // query params
        if ($screenshots !== null) {
            $queryParams['screenshots'] = $this->apiClient->getSerializer()->toQueryValue($screenshots);
        }
        // query params
        if ($precise_status !== null) {
            $queryParams['precise_status'] = $this->apiClient->getSerializer()->toQueryValue($precise_status);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\PaginatedEncodingsCollection',
                '/videos/{id}/encodings.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\PaginatedEncodingsCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\PaginatedEncodingsCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation videoMetadata
     *
     * Returns a Video's metadata
     *
     * @param string $id Id of a Video. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\VideoMetadata
     */
    public function videoMetadata($id, $factory_id)
    {
        list($response) = $this->videoMetadataWithHttpInfo($id, $factory_id);
        return $response;
    }

    /**
     * Operation videoMetadataWithHttpInfo
     *
     * Returns a Video's metadata
     *
     * @param string $id Id of a Video. (required)
     * @param string $factory_id Id of a Factory. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\VideoMetadata, HTTP status code, HTTP response headers (array of strings)
     */
    public function videoMetadataWithHttpInfo($id, $factory_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling videoMetadata');
        }
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling videoMetadata');
        }
        // parse inputs
        $resourcePath = "/videos/{id}/metadata.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\VideoMetadata',
                '/videos/{id}/metadata.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\VideoMetadata', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\VideoMetadata', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation videos
     *
     * Returns a collection of Video objects.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param int $page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param int $per_page A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\PaginatedVideoCollection
     */
    public function videos($factory_id, $page = null, $per_page = null)
    {
        list($response) = $this->videosWithHttpInfo($factory_id, $page, $per_page);
        return $response;
    }

    /**
     * Operation videosWithHttpInfo
     *
     * Returns a collection of Video objects.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param int $page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param int $per_page A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\PaginatedVideoCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function videosWithHttpInfo($factory_id, $page = null, $per_page = null)
    {
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling videos');
        }
        // parse inputs
        $resourcePath = "/videos.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\PaginatedVideoCollection',
                '/videos.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\PaginatedVideoCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\PaginatedVideoCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation workflows
     *
     * Returns a collection of Workflows that belong to a Factory.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param int $page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param int $per_page A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Flip\PaginatedWorkflowsCollection
     */
    public function workflows($factory_id, $page = null, $per_page = null)
    {
        list($response) = $this->workflowsWithHttpInfo($factory_id, $page, $per_page);
        return $response;
    }

    /**
     * Operation workflowsWithHttpInfo
     *
     * Returns a collection of Workflows that belong to a Factory.
     *
     * @param string $factory_id Id of a Factory. (required)
     * @param int $page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param int $per_page A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Flip\PaginatedWorkflowsCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function workflowsWithHttpInfo($factory_id, $page = null, $per_page = null)
    {
        // verify the required parameter 'factory_id' is set
        if ($factory_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $factory_id when calling workflows');
        }
        // parse inputs
        $resourcePath = "/workflows.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($factory_id !== null) {
            $queryParams['factory_id'] = $this->apiClient->getSerializer()->toQueryValue($factory_id);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Flip\PaginatedWorkflowsCollection',
                '/workflows.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Flip\PaginatedWorkflowsCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\PaginatedWorkflowsCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Flip\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
