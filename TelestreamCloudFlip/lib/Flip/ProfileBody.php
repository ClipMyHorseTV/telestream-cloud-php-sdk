<?php
/**
 * ProfileBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  TelestreamCloud
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flip API
 *
 * Description
 *
 * OpenAPI spec version: 3.1.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TelestreamCloud\Flip;

use \ArrayAccess;

/**
 * ProfileBody Class Doc Comment
 *
 * @category    Class
 * @package     TelestreamCloud
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ProfileBody implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ProfileBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'preset_name' => 'string',
        'advanced_fps_conversion' => 'string',
        'aspect_mode' => 'string',
        'aspect_ratio' => 'string',
        'audio_bitrate' => 'int',
        'audio_channels' => 'int',
        'audio_channels_layout' => 'string',
        'audio_channels_per_track' => 'string',
        'audio_codec' => 'string',
        'audio_format' => 'string',
        'audio_pid' => 'string',
        'audio_profile' => 'string',
        'audio_sample_rate' => 'int',
        'audio_streams' => 'int',
        'avcintra_class' => 'string',
        'buffer_size' => 'string',
        'buffer_size_in_packets' => 'string',
        'clip_length' => 'string',
        'clip_offset' => 'string',
        'closed_captions' => 'string',
        'dash_profile' => 'string',
        'deinterlace' => 'string',
        'deinterlace_frames' => 'string',
        'dnxhd_type' => 'string',
        'encryption' => 'bool',
        'extname' => 'string',
        'fps' => 'float',
        'frame_offsets' => 'string',
        'frame_interval' => 'string',
        'frame_count' => 'int',
        'h264_level' => 'string',
        'h264_profile' => 'string',
        'h264_tune' => 'string',
        'height' => 'int',
        'imx_type' => 'string',
        'interlace' => 'string',
        'keyframe_interval' => 'int',
        'keyframe_rate' => 'float',
        'max_rate' => 'int',
        'merge_audio_streams' => 'string',
        'name' => 'string',
        'outputs_path_format' => 'string',
        'pmt_pid' => 'string',
        'prores_format' => 'string',
        'segment_time' => 'string',
        'size' => 'string',
        'tar' => 'bool',
        'transport_rate' => 'string',
        'ts_pids' => 'string',
        'upscale' => 'bool',
        'variants' => 'string',
        'video_bitrate' => 'int',
        'video_pid' => 'string',
        'watermark_bottom' => 'string',
        'watermark_height' => 'string',
        'watermark_left' => 'string',
        'watermark_right' => 'string',
        'watermark_top' => 'string',
        'watermark_url' => 'string',
        'watermark_width' => 'string',
        'width' => 'int',
        'x264_options' => 'string',
        'x265_options' => 'string',
        'xdcam_format' => 'string',
        'mute_audio_tracks' => 'bool',
        'byte_range_requests' => 'string',
        'lang' => 'string',
        'use_editlist' => 'string',
        'audio_map' => 'string',
        'audio_stream_id' => 'string',
        'bumpers' => 'string',
        'codec_preset' => 'string',
        'color_metadata' => 'string',
        'crop_input_bottom' => 'string',
        'crop_input_height' => 'string',
        'crop_input_left' => 'string',
        'crop_input_right' => 'string',
        'crop_input_top' => 'string',
        'crop_input_width' => 'string',
        'dynamic_recipe' => 'string',
        'playlist_type' => 'string',
        'preset_version' => 'string',
        'segment_delimiter' => 'string',
        'sws_flags' => 'string',
        'telestream_block_size' => 'string',
        'telestream_blur_scaler' => 'string',
        'telestream_cost_scaler' => 'string',
        'telestream_search_length_scaler' => 'string',
        'telestream_subpel_mode' => 'string',
        'trailers' => 'string',
        'vantage_group_id' => 'string',
        'watermark_bumpers' => 'string',
        'watermark_trailers' => 'string',
        'workorder_criteria' => 'object',
        'tachyon_allow_remove_pulldown' => 'bool',
        'tachyon_enable_post_pulldown_filter' => 'bool',
        'tachyon_media_hint_is_cartoon' => 'bool',
        'tachyon_media_hint_has_chroma_noise' => 'bool',
        'tachyon_more_sensitive_remove_pulldown' => 'bool',
        'tachyon_allow_add_standard_pd' => 'bool',
        'tachyon_allow_add_2_2pd' => 'bool',
        'tachyon_allow_add_4_4pd' => 'bool',
        'tachyon_allow_add_4_6pd' => 'bool',
        'tachyon_allow_add_euro_pd' => 'bool',
        'tachyon_allow_add_adaptive_pd' => 'bool',
        'tachyon_motion_amount' => 'string',
        'tachyon_fallback_size' => 'string',
        'tachyon_mblock_size' => 'string',
        'tachyon_cut_detection_sensitivity' => 'float',
        'eac3_evolution_enable' => 'bool',
        'eac3_bitstream_mode' => 'string',
        'eac3_ninety_degree_phase_shift' => 'bool',
        'eac3_three_decibel_attenuation' => 'bool',
        'eac3_enable_lfe_low_pass_filter' => 'bool',
        'eac3_analog_to_digital_converter_type' => 'string',
        'eac3_stereo_downmix_preference' => 'string',
        'eac3_lt_rt_center_mix_level' => 'string',
        'eac3_lt_rt_surround_mix_level' => 'string',
        'eac3_lo_ro_center_mix_level' => 'string',
        'eac3_lo_ro_surround_mix_level' => 'string',
        'eac3_surround_ex_mode' => 'string',
        'eac3_drc_line_mode_profile' => 'string',
        'eac3_drc_rf_mode_profile' => 'string',
        'eac3_dialog_normalization' => 'int',
        'eac3_room_type' => 'string',
        'eac3_mixing_level' => 'int',
        'eac3_copyright_protected' => 'bool',
        'eac3_original_bitstream' => 'bool',
        'title' => 'string',
        'time_code' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'preset_name' => null,
        'advanced_fps_conversion' => null,
        'aspect_mode' => null,
        'aspect_ratio' => null,
        'audio_bitrate' => null,
        'audio_channels' => null,
        'audio_channels_layout' => null,
        'audio_channels_per_track' => null,
        'audio_codec' => null,
        'audio_format' => null,
        'audio_pid' => null,
        'audio_profile' => null,
        'audio_sample_rate' => null,
        'audio_streams' => null,
        'avcintra_class' => null,
        'buffer_size' => null,
        'buffer_size_in_packets' => null,
        'clip_length' => null,
        'clip_offset' => null,
        'closed_captions' => null,
        'dash_profile' => null,
        'deinterlace' => null,
        'deinterlace_frames' => null,
        'dnxhd_type' => null,
        'encryption' => null,
        'extname' => null,
        'fps' => null,
        'frame_offsets' => null,
        'frame_interval' => null,
        'frame_count' => null,
        'h264_level' => null,
        'h264_profile' => null,
        'h264_tune' => null,
        'height' => null,
        'imx_type' => null,
        'interlace' => null,
        'keyframe_interval' => null,
        'keyframe_rate' => null,
        'max_rate' => null,
        'merge_audio_streams' => null,
        'name' => null,
        'outputs_path_format' => null,
        'pmt_pid' => null,
        'prores_format' => null,
        'segment_time' => null,
        'size' => null,
        'tar' => null,
        'transport_rate' => null,
        'ts_pids' => null,
        'upscale' => null,
        'variants' => null,
        'video_bitrate' => null,
        'video_pid' => null,
        'watermark_bottom' => null,
        'watermark_height' => null,
        'watermark_left' => null,
        'watermark_right' => null,
        'watermark_top' => null,
        'watermark_url' => null,
        'watermark_width' => null,
        'width' => null,
        'x264_options' => null,
        'x265_options' => null,
        'xdcam_format' => null,
        'mute_audio_tracks' => null,
        'byte_range_requests' => null,
        'lang' => null,
        'use_editlist' => null,
        'audio_map' => null,
        'audio_stream_id' => null,
        'bumpers' => null,
        'codec_preset' => null,
        'color_metadata' => null,
        'crop_input_bottom' => null,
        'crop_input_height' => null,
        'crop_input_left' => null,
        'crop_input_right' => null,
        'crop_input_top' => null,
        'crop_input_width' => null,
        'dynamic_recipe' => null,
        'playlist_type' => null,
        'preset_version' => null,
        'segment_delimiter' => null,
        'sws_flags' => null,
        'telestream_block_size' => null,
        'telestream_blur_scaler' => null,
        'telestream_cost_scaler' => null,
        'telestream_search_length_scaler' => null,
        'telestream_subpel_mode' => null,
        'trailers' => null,
        'vantage_group_id' => null,
        'watermark_bumpers' => null,
        'watermark_trailers' => null,
        'workorder_criteria' => null,
        'tachyon_allow_remove_pulldown' => null,
        'tachyon_enable_post_pulldown_filter' => null,
        'tachyon_media_hint_is_cartoon' => null,
        'tachyon_media_hint_has_chroma_noise' => null,
        'tachyon_more_sensitive_remove_pulldown' => null,
        'tachyon_allow_add_standard_pd' => null,
        'tachyon_allow_add_2_2pd' => null,
        'tachyon_allow_add_4_4pd' => null,
        'tachyon_allow_add_4_6pd' => null,
        'tachyon_allow_add_euro_pd' => null,
        'tachyon_allow_add_adaptive_pd' => null,
        'tachyon_motion_amount' => null,
        'tachyon_fallback_size' => null,
        'tachyon_mblock_size' => null,
        'tachyon_cut_detection_sensitivity' => null,
        'eac3_evolution_enable' => null,
        'eac3_bitstream_mode' => null,
        'eac3_ninety_degree_phase_shift' => null,
        'eac3_three_decibel_attenuation' => null,
        'eac3_enable_lfe_low_pass_filter' => null,
        'eac3_analog_to_digital_converter_type' => null,
        'eac3_stereo_downmix_preference' => null,
        'eac3_lt_rt_center_mix_level' => null,
        'eac3_lt_rt_surround_mix_level' => null,
        'eac3_lo_ro_center_mix_level' => null,
        'eac3_lo_ro_surround_mix_level' => null,
        'eac3_surround_ex_mode' => null,
        'eac3_drc_line_mode_profile' => null,
        'eac3_drc_rf_mode_profile' => null,
        'eac3_dialog_normalization' => null,
        'eac3_room_type' => null,
        'eac3_mixing_level' => null,
        'eac3_copyright_protected' => null,
        'eac3_original_bitstream' => null,
        'title' => null,
        'time_code' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'preset_name' => 'preset_name',
        'advanced_fps_conversion' => 'advanced_fps_conversion',
        'aspect_mode' => 'aspect_mode',
        'aspect_ratio' => 'aspect_ratio',
        'audio_bitrate' => 'audio_bitrate',
        'audio_channels' => 'audio_channels',
        'audio_channels_layout' => 'audio_channels_layout',
        'audio_channels_per_track' => 'audio_channels_per_track',
        'audio_codec' => 'audio_codec',
        'audio_format' => 'audio_format',
        'audio_pid' => 'audio_pid',
        'audio_profile' => 'audio_profile',
        'audio_sample_rate' => 'audio_sample_rate',
        'audio_streams' => 'audio_streams',
        'avcintra_class' => 'avcintra_class',
        'buffer_size' => 'buffer_size',
        'buffer_size_in_packets' => 'buffer_size_in_packets',
        'clip_length' => 'clip_length',
        'clip_offset' => 'clip_offset',
        'closed_captions' => 'closed_captions',
        'dash_profile' => 'dash_profile',
        'deinterlace' => 'deinterlace',
        'deinterlace_frames' => 'deinterlace_frames',
        'dnxhd_type' => 'dnxhd_type',
        'encryption' => 'encryption',
        'extname' => 'extname',
        'fps' => 'fps',
        'frame_offsets' => 'frame_offsets',
        'frame_interval' => 'frame_interval',
        'frame_count' => 'frame_count',
        'h264_level' => 'h264_level',
        'h264_profile' => 'h264_profile',
        'h264_tune' => 'h264_tune',
        'height' => 'height',
        'imx_type' => 'imx_type',
        'interlace' => 'interlace',
        'keyframe_interval' => 'keyframe_interval',
        'keyframe_rate' => 'keyframe_rate',
        'max_rate' => 'max_rate',
        'merge_audio_streams' => 'merge_audio_streams',
        'name' => 'name',
        'outputs_path_format' => 'outputs_path_format',
        'pmt_pid' => 'pmt_pid',
        'prores_format' => 'prores_format',
        'segment_time' => 'segment_time',
        'size' => 'size',
        'tar' => 'tar',
        'transport_rate' => 'transport_rate',
        'ts_pids' => 'ts_pids',
        'upscale' => 'upscale',
        'variants' => 'variants',
        'video_bitrate' => 'video_bitrate',
        'video_pid' => 'video_pid',
        'watermark_bottom' => 'watermark_bottom',
        'watermark_height' => 'watermark_height',
        'watermark_left' => 'watermark_left',
        'watermark_right' => 'watermark_right',
        'watermark_top' => 'watermark_top',
        'watermark_url' => 'watermark_url',
        'watermark_width' => 'watermark_width',
        'width' => 'width',
        'x264_options' => 'x264_options',
        'x265_options' => 'x265_options',
        'xdcam_format' => 'xdcam_format',
        'mute_audio_tracks' => 'mute_audio_tracks',
        'byte_range_requests' => 'byte_range_requests',
        'lang' => 'lang',
        'use_editlist' => 'use_editlist',
        'audio_map' => 'audio_map',
        'audio_stream_id' => 'audio_stream_id',
        'bumpers' => 'bumpers',
        'codec_preset' => 'codec_preset',
        'color_metadata' => 'color_metadata',
        'crop_input_bottom' => 'crop_input_bottom',
        'crop_input_height' => 'crop_input_height',
        'crop_input_left' => 'crop_input_left',
        'crop_input_right' => 'crop_input_right',
        'crop_input_top' => 'crop_input_top',
        'crop_input_width' => 'crop_input_width',
        'dynamic_recipe' => 'dynamic_recipe',
        'playlist_type' => 'playlist_type',
        'preset_version' => 'preset_version',
        'segment_delimiter' => 'segment_delimiter',
        'sws_flags' => 'sws_flags',
        'telestream_block_size' => 'telestream_block_size',
        'telestream_blur_scaler' => 'telestream_blur_scaler',
        'telestream_cost_scaler' => 'telestream_cost_scaler',
        'telestream_search_length_scaler' => 'telestream_search_length_scaler',
        'telestream_subpel_mode' => 'telestream_subpel_mode',
        'trailers' => 'trailers',
        'vantage_group_id' => 'vantage_group_id',
        'watermark_bumpers' => 'watermark_bumpers',
        'watermark_trailers' => 'watermark_trailers',
        'workorder_criteria' => 'workorder_criteria',
        'tachyon_allow_remove_pulldown' => 'tachyon_allow_remove_pulldown',
        'tachyon_enable_post_pulldown_filter' => 'tachyon_enable_post_pulldown_filter',
        'tachyon_media_hint_is_cartoon' => 'tachyon_media_hint_is_cartoon',
        'tachyon_media_hint_has_chroma_noise' => 'tachyon_media_hint_has_chroma_noise',
        'tachyon_more_sensitive_remove_pulldown' => 'tachyon_more_sensitive_remove_pulldown',
        'tachyon_allow_add_standard_pd' => 'tachyon_allow_add_standard_pd',
        'tachyon_allow_add_2_2pd' => 'tachyon_allow_add_2_2pd',
        'tachyon_allow_add_4_4pd' => 'tachyon_allow_add_4_4pd',
        'tachyon_allow_add_4_6pd' => 'tachyon_allow_add_4_6pd',
        'tachyon_allow_add_euro_pd' => 'tachyon_allow_add_euro_pd',
        'tachyon_allow_add_adaptive_pd' => 'tachyon_allow_add_adaptive_pd',
        'tachyon_motion_amount' => 'tachyon_motion_amount',
        'tachyon_fallback_size' => 'tachyon_fallback_size',
        'tachyon_mblock_size' => 'tachyon_mblock_size',
        'tachyon_cut_detection_sensitivity' => 'tachyon_cut_detection_sensitivity',
        'eac3_evolution_enable' => 'eac3_evolution_enable',
        'eac3_bitstream_mode' => 'eac3_bitstream_mode',
        'eac3_ninety_degree_phase_shift' => 'eac3_ninety_degree_phase_shift',
        'eac3_three_decibel_attenuation' => 'eac3_three_decibel_attenuation',
        'eac3_enable_lfe_low_pass_filter' => 'eac3_enable_lfe_low_pass_filter',
        'eac3_analog_to_digital_converter_type' => 'eac3_analog_to_digital_converter_type',
        'eac3_stereo_downmix_preference' => 'eac3_stereo_downmix_preference',
        'eac3_lt_rt_center_mix_level' => 'eac3_lt_rt_center_mix_level',
        'eac3_lt_rt_surround_mix_level' => 'eac3_lt_rt_surround_mix_level',
        'eac3_lo_ro_center_mix_level' => 'eac3_lo_ro_center_mix_level',
        'eac3_lo_ro_surround_mix_level' => 'eac3_lo_ro_surround_mix_level',
        'eac3_surround_ex_mode' => 'eac3_surround_ex_mode',
        'eac3_drc_line_mode_profile' => 'eac3_drc_line_mode_profile',
        'eac3_drc_rf_mode_profile' => 'eac3_drc_rf_mode_profile',
        'eac3_dialog_normalization' => 'eac3_dialog_normalization',
        'eac3_room_type' => 'eac3_room_type',
        'eac3_mixing_level' => 'eac3_mixing_level',
        'eac3_copyright_protected' => 'eac3_copyright_protected',
        'eac3_original_bitstream' => 'eac3_original_bitstream',
        'title' => 'title',
        'time_code' => 'time_code'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'preset_name' => 'setPresetName',
        'advanced_fps_conversion' => 'setAdvancedFpsConversion',
        'aspect_mode' => 'setAspectMode',
        'aspect_ratio' => 'setAspectRatio',
        'audio_bitrate' => 'setAudioBitrate',
        'audio_channels' => 'setAudioChannels',
        'audio_channels_layout' => 'setAudioChannelsLayout',
        'audio_channels_per_track' => 'setAudioChannelsPerTrack',
        'audio_codec' => 'setAudioCodec',
        'audio_format' => 'setAudioFormat',
        'audio_pid' => 'setAudioPid',
        'audio_profile' => 'setAudioProfile',
        'audio_sample_rate' => 'setAudioSampleRate',
        'audio_streams' => 'setAudioStreams',
        'avcintra_class' => 'setAvcintraClass',
        'buffer_size' => 'setBufferSize',
        'buffer_size_in_packets' => 'setBufferSizeInPackets',
        'clip_length' => 'setClipLength',
        'clip_offset' => 'setClipOffset',
        'closed_captions' => 'setClosedCaptions',
        'dash_profile' => 'setDashProfile',
        'deinterlace' => 'setDeinterlace',
        'deinterlace_frames' => 'setDeinterlaceFrames',
        'dnxhd_type' => 'setDnxhdType',
        'encryption' => 'setEncryption',
        'extname' => 'setExtname',
        'fps' => 'setFps',
        'frame_offsets' => 'setFrameOffsets',
        'frame_interval' => 'setFrameInterval',
        'frame_count' => 'setFrameCount',
        'h264_level' => 'setH264Level',
        'h264_profile' => 'setH264Profile',
        'h264_tune' => 'setH264Tune',
        'height' => 'setHeight',
        'imx_type' => 'setImxType',
        'interlace' => 'setInterlace',
        'keyframe_interval' => 'setKeyframeInterval',
        'keyframe_rate' => 'setKeyframeRate',
        'max_rate' => 'setMaxRate',
        'merge_audio_streams' => 'setMergeAudioStreams',
        'name' => 'setName',
        'outputs_path_format' => 'setOutputsPathFormat',
        'pmt_pid' => 'setPmtPid',
        'prores_format' => 'setProresFormat',
        'segment_time' => 'setSegmentTime',
        'size' => 'setSize',
        'tar' => 'setTar',
        'transport_rate' => 'setTransportRate',
        'ts_pids' => 'setTsPids',
        'upscale' => 'setUpscale',
        'variants' => 'setVariants',
        'video_bitrate' => 'setVideoBitrate',
        'video_pid' => 'setVideoPid',
        'watermark_bottom' => 'setWatermarkBottom',
        'watermark_height' => 'setWatermarkHeight',
        'watermark_left' => 'setWatermarkLeft',
        'watermark_right' => 'setWatermarkRight',
        'watermark_top' => 'setWatermarkTop',
        'watermark_url' => 'setWatermarkUrl',
        'watermark_width' => 'setWatermarkWidth',
        'width' => 'setWidth',
        'x264_options' => 'setX264Options',
        'x265_options' => 'setX265Options',
        'xdcam_format' => 'setXdcamFormat',
        'mute_audio_tracks' => 'setMuteAudioTracks',
        'byte_range_requests' => 'setByteRangeRequests',
        'lang' => 'setLang',
        'use_editlist' => 'setUseEditlist',
        'audio_map' => 'setAudioMap',
        'audio_stream_id' => 'setAudioStreamId',
        'bumpers' => 'setBumpers',
        'codec_preset' => 'setCodecPreset',
        'color_metadata' => 'setColorMetadata',
        'crop_input_bottom' => 'setCropInputBottom',
        'crop_input_height' => 'setCropInputHeight',
        'crop_input_left' => 'setCropInputLeft',
        'crop_input_right' => 'setCropInputRight',
        'crop_input_top' => 'setCropInputTop',
        'crop_input_width' => 'setCropInputWidth',
        'dynamic_recipe' => 'setDynamicRecipe',
        'playlist_type' => 'setPlaylistType',
        'preset_version' => 'setPresetVersion',
        'segment_delimiter' => 'setSegmentDelimiter',
        'sws_flags' => 'setSwsFlags',
        'telestream_block_size' => 'setTelestreamBlockSize',
        'telestream_blur_scaler' => 'setTelestreamBlurScaler',
        'telestream_cost_scaler' => 'setTelestreamCostScaler',
        'telestream_search_length_scaler' => 'setTelestreamSearchLengthScaler',
        'telestream_subpel_mode' => 'setTelestreamSubpelMode',
        'trailers' => 'setTrailers',
        'vantage_group_id' => 'setVantageGroupId',
        'watermark_bumpers' => 'setWatermarkBumpers',
        'watermark_trailers' => 'setWatermarkTrailers',
        'workorder_criteria' => 'setWorkorderCriteria',
        'tachyon_allow_remove_pulldown' => 'setTachyonAllowRemovePulldown',
        'tachyon_enable_post_pulldown_filter' => 'setTachyonEnablePostPulldownFilter',
        'tachyon_media_hint_is_cartoon' => 'setTachyonMediaHintIsCartoon',
        'tachyon_media_hint_has_chroma_noise' => 'setTachyonMediaHintHasChromaNoise',
        'tachyon_more_sensitive_remove_pulldown' => 'setTachyonMoreSensitiveRemovePulldown',
        'tachyon_allow_add_standard_pd' => 'setTachyonAllowAddStandardPd',
        'tachyon_allow_add_2_2pd' => 'setTachyonAllowAdd22pd',
        'tachyon_allow_add_4_4pd' => 'setTachyonAllowAdd44pd',
        'tachyon_allow_add_4_6pd' => 'setTachyonAllowAdd46pd',
        'tachyon_allow_add_euro_pd' => 'setTachyonAllowAddEuroPd',
        'tachyon_allow_add_adaptive_pd' => 'setTachyonAllowAddAdaptivePd',
        'tachyon_motion_amount' => 'setTachyonMotionAmount',
        'tachyon_fallback_size' => 'setTachyonFallbackSize',
        'tachyon_mblock_size' => 'setTachyonMblockSize',
        'tachyon_cut_detection_sensitivity' => 'setTachyonCutDetectionSensitivity',
        'eac3_evolution_enable' => 'setEac3EvolutionEnable',
        'eac3_bitstream_mode' => 'setEac3BitstreamMode',
        'eac3_ninety_degree_phase_shift' => 'setEac3NinetyDegreePhaseShift',
        'eac3_three_decibel_attenuation' => 'setEac3ThreeDecibelAttenuation',
        'eac3_enable_lfe_low_pass_filter' => 'setEac3EnableLfeLowPassFilter',
        'eac3_analog_to_digital_converter_type' => 'setEac3AnalogToDigitalConverterType',
        'eac3_stereo_downmix_preference' => 'setEac3StereoDownmixPreference',
        'eac3_lt_rt_center_mix_level' => 'setEac3LtRtCenterMixLevel',
        'eac3_lt_rt_surround_mix_level' => 'setEac3LtRtSurroundMixLevel',
        'eac3_lo_ro_center_mix_level' => 'setEac3LoRoCenterMixLevel',
        'eac3_lo_ro_surround_mix_level' => 'setEac3LoRoSurroundMixLevel',
        'eac3_surround_ex_mode' => 'setEac3SurroundExMode',
        'eac3_drc_line_mode_profile' => 'setEac3DrcLineModeProfile',
        'eac3_drc_rf_mode_profile' => 'setEac3DrcRfModeProfile',
        'eac3_dialog_normalization' => 'setEac3DialogNormalization',
        'eac3_room_type' => 'setEac3RoomType',
        'eac3_mixing_level' => 'setEac3MixingLevel',
        'eac3_copyright_protected' => 'setEac3CopyrightProtected',
        'eac3_original_bitstream' => 'setEac3OriginalBitstream',
        'title' => 'setTitle',
        'time_code' => 'setTimeCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'preset_name' => 'getPresetName',
        'advanced_fps_conversion' => 'getAdvancedFpsConversion',
        'aspect_mode' => 'getAspectMode',
        'aspect_ratio' => 'getAspectRatio',
        'audio_bitrate' => 'getAudioBitrate',
        'audio_channels' => 'getAudioChannels',
        'audio_channels_layout' => 'getAudioChannelsLayout',
        'audio_channels_per_track' => 'getAudioChannelsPerTrack',
        'audio_codec' => 'getAudioCodec',
        'audio_format' => 'getAudioFormat',
        'audio_pid' => 'getAudioPid',
        'audio_profile' => 'getAudioProfile',
        'audio_sample_rate' => 'getAudioSampleRate',
        'audio_streams' => 'getAudioStreams',
        'avcintra_class' => 'getAvcintraClass',
        'buffer_size' => 'getBufferSize',
        'buffer_size_in_packets' => 'getBufferSizeInPackets',
        'clip_length' => 'getClipLength',
        'clip_offset' => 'getClipOffset',
        'closed_captions' => 'getClosedCaptions',
        'dash_profile' => 'getDashProfile',
        'deinterlace' => 'getDeinterlace',
        'deinterlace_frames' => 'getDeinterlaceFrames',
        'dnxhd_type' => 'getDnxhdType',
        'encryption' => 'getEncryption',
        'extname' => 'getExtname',
        'fps' => 'getFps',
        'frame_offsets' => 'getFrameOffsets',
        'frame_interval' => 'getFrameInterval',
        'frame_count' => 'getFrameCount',
        'h264_level' => 'getH264Level',
        'h264_profile' => 'getH264Profile',
        'h264_tune' => 'getH264Tune',
        'height' => 'getHeight',
        'imx_type' => 'getImxType',
        'interlace' => 'getInterlace',
        'keyframe_interval' => 'getKeyframeInterval',
        'keyframe_rate' => 'getKeyframeRate',
        'max_rate' => 'getMaxRate',
        'merge_audio_streams' => 'getMergeAudioStreams',
        'name' => 'getName',
        'outputs_path_format' => 'getOutputsPathFormat',
        'pmt_pid' => 'getPmtPid',
        'prores_format' => 'getProresFormat',
        'segment_time' => 'getSegmentTime',
        'size' => 'getSize',
        'tar' => 'getTar',
        'transport_rate' => 'getTransportRate',
        'ts_pids' => 'getTsPids',
        'upscale' => 'getUpscale',
        'variants' => 'getVariants',
        'video_bitrate' => 'getVideoBitrate',
        'video_pid' => 'getVideoPid',
        'watermark_bottom' => 'getWatermarkBottom',
        'watermark_height' => 'getWatermarkHeight',
        'watermark_left' => 'getWatermarkLeft',
        'watermark_right' => 'getWatermarkRight',
        'watermark_top' => 'getWatermarkTop',
        'watermark_url' => 'getWatermarkUrl',
        'watermark_width' => 'getWatermarkWidth',
        'width' => 'getWidth',
        'x264_options' => 'getX264Options',
        'x265_options' => 'getX265Options',
        'xdcam_format' => 'getXdcamFormat',
        'mute_audio_tracks' => 'getMuteAudioTracks',
        'byte_range_requests' => 'getByteRangeRequests',
        'lang' => 'getLang',
        'use_editlist' => 'getUseEditlist',
        'audio_map' => 'getAudioMap',
        'audio_stream_id' => 'getAudioStreamId',
        'bumpers' => 'getBumpers',
        'codec_preset' => 'getCodecPreset',
        'color_metadata' => 'getColorMetadata',
        'crop_input_bottom' => 'getCropInputBottom',
        'crop_input_height' => 'getCropInputHeight',
        'crop_input_left' => 'getCropInputLeft',
        'crop_input_right' => 'getCropInputRight',
        'crop_input_top' => 'getCropInputTop',
        'crop_input_width' => 'getCropInputWidth',
        'dynamic_recipe' => 'getDynamicRecipe',
        'playlist_type' => 'getPlaylistType',
        'preset_version' => 'getPresetVersion',
        'segment_delimiter' => 'getSegmentDelimiter',
        'sws_flags' => 'getSwsFlags',
        'telestream_block_size' => 'getTelestreamBlockSize',
        'telestream_blur_scaler' => 'getTelestreamBlurScaler',
        'telestream_cost_scaler' => 'getTelestreamCostScaler',
        'telestream_search_length_scaler' => 'getTelestreamSearchLengthScaler',
        'telestream_subpel_mode' => 'getTelestreamSubpelMode',
        'trailers' => 'getTrailers',
        'vantage_group_id' => 'getVantageGroupId',
        'watermark_bumpers' => 'getWatermarkBumpers',
        'watermark_trailers' => 'getWatermarkTrailers',
        'workorder_criteria' => 'getWorkorderCriteria',
        'tachyon_allow_remove_pulldown' => 'getTachyonAllowRemovePulldown',
        'tachyon_enable_post_pulldown_filter' => 'getTachyonEnablePostPulldownFilter',
        'tachyon_media_hint_is_cartoon' => 'getTachyonMediaHintIsCartoon',
        'tachyon_media_hint_has_chroma_noise' => 'getTachyonMediaHintHasChromaNoise',
        'tachyon_more_sensitive_remove_pulldown' => 'getTachyonMoreSensitiveRemovePulldown',
        'tachyon_allow_add_standard_pd' => 'getTachyonAllowAddStandardPd',
        'tachyon_allow_add_2_2pd' => 'getTachyonAllowAdd22pd',
        'tachyon_allow_add_4_4pd' => 'getTachyonAllowAdd44pd',
        'tachyon_allow_add_4_6pd' => 'getTachyonAllowAdd46pd',
        'tachyon_allow_add_euro_pd' => 'getTachyonAllowAddEuroPd',
        'tachyon_allow_add_adaptive_pd' => 'getTachyonAllowAddAdaptivePd',
        'tachyon_motion_amount' => 'getTachyonMotionAmount',
        'tachyon_fallback_size' => 'getTachyonFallbackSize',
        'tachyon_mblock_size' => 'getTachyonMblockSize',
        'tachyon_cut_detection_sensitivity' => 'getTachyonCutDetectionSensitivity',
        'eac3_evolution_enable' => 'getEac3EvolutionEnable',
        'eac3_bitstream_mode' => 'getEac3BitstreamMode',
        'eac3_ninety_degree_phase_shift' => 'getEac3NinetyDegreePhaseShift',
        'eac3_three_decibel_attenuation' => 'getEac3ThreeDecibelAttenuation',
        'eac3_enable_lfe_low_pass_filter' => 'getEac3EnableLfeLowPassFilter',
        'eac3_analog_to_digital_converter_type' => 'getEac3AnalogToDigitalConverterType',
        'eac3_stereo_downmix_preference' => 'getEac3StereoDownmixPreference',
        'eac3_lt_rt_center_mix_level' => 'getEac3LtRtCenterMixLevel',
        'eac3_lt_rt_surround_mix_level' => 'getEac3LtRtSurroundMixLevel',
        'eac3_lo_ro_center_mix_level' => 'getEac3LoRoCenterMixLevel',
        'eac3_lo_ro_surround_mix_level' => 'getEac3LoRoSurroundMixLevel',
        'eac3_surround_ex_mode' => 'getEac3SurroundExMode',
        'eac3_drc_line_mode_profile' => 'getEac3DrcLineModeProfile',
        'eac3_drc_rf_mode_profile' => 'getEac3DrcRfModeProfile',
        'eac3_dialog_normalization' => 'getEac3DialogNormalization',
        'eac3_room_type' => 'getEac3RoomType',
        'eac3_mixing_level' => 'getEac3MixingLevel',
        'eac3_copyright_protected' => 'getEac3CopyrightProtected',
        'eac3_original_bitstream' => 'getEac3OriginalBitstream',
        'title' => 'getTitle',
        'time_code' => 'getTimeCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PRESET_NAME_AAC = 'aac';
    const PRESET_NAME_AVCINTRA = 'avc.intra';
    const PRESET_NAME_CROCODOC = 'crocodoc';
    const PRESET_NAME_DASHVARIANT = 'dash.variant';
    const PRESET_NAME_DASHVARIANTAUDIO = 'dash.variant.audio';
    const PRESET_NAME_DASHVARIANTWEBVTT = 'dash.variant.webvtt';
    const PRESET_NAME_DASHVARIANTTTML = 'dash.variant.ttml';
    const PRESET_NAME_DASHVARIANTPLAYLIST = 'dash.variant.playlist';
    const PRESET_NAME_DASHVARIANTNVENC = 'dash.variant.nvenc';
    const PRESET_NAME_DASHMUXER = 'dash.muxer';
    const PRESET_NAME_DASHMUXERAUDIO = 'dash.muxer.audio';
    const PRESET_NAME_DNXHD = 'dnxhd';
    const PRESET_NAME_H264 = 'h264';
    const PRESET_NAME_H264BASELINE = 'h264.baseline';
    const PRESET_NAME_H264NVENCTELESTREAMMOV = 'h264.nvenc.telestream.mov';
    const PRESET_NAME_H264NVENC = 'h264.nvenc';
    const PRESET_NAME_H265 = 'h265';
    const PRESET_NAME_H2654_K = 'h265.4K';
    const PRESET_NAME_HLSMUXER = 'hls.muxer';
    const PRESET_NAME_HLSMUXERAUDIO = 'hls.muxer.audio';
    const PRESET_NAME_HLSVARIANT = 'hls.variant';
    const PRESET_NAME_HLSVARIANTAUDIO = 'hls.variant.audio';
    const PRESET_NAME_HLSVARIANTPLAYLIST = 'hls.variant.playlist';
    const PRESET_NAME_HLSVARIANTNVENC = 'hls.variant.nvenc';
    const PRESET_NAME_HLSVARIANTWEBVTT = 'hls.variant.webvtt';
    const PRESET_NAME_HSS = 'hss';
    const PRESET_NAME_HSSVARIANT = 'hss.variant';
    const PRESET_NAME_HSSVARIANTAUDIO = 'hss.variant.audio';
    const PRESET_NAME_HSSVARIANTPLAYLIST = 'hss.variant.playlist';
    const PRESET_NAME_IMX = 'imx';
    const PRESET_NAME_IPHONE_AND_IPAD = 'iphone_and_ipad';
    const PRESET_NAME_JPEG = 'jpeg';
    const PRESET_NAME_M4A = 'm4a';
    const PRESET_NAME_MP3 = 'mp3';
    const PRESET_NAME_MPEG2 = 'mpeg2';
    const PRESET_NAME_MPEGPS = 'mpegps';
    const PRESET_NAME_MPEGTSH264 = 'mpegts.h264';
    const PRESET_NAME_MPEGTSMPEG2 = 'mpegts.mpeg2';
    const PRESET_NAME_OGA = 'oga';
    const PRESET_NAME_OGG = 'ogg';
    const PRESET_NAME_PNG = 'png';
    const PRESET_NAME_PRORES422 = 'prores422';
    const PRESET_NAME_QUICK_ONE_THUMBNAIL = 'quick_one_thumbnail';
    const PRESET_NAME_THUMBNAIL = 'thumbnail';
    const PRESET_NAME_TRANSCRIPT = 'transcript';
    const PRESET_NAME_VORBIS = 'vorbis';
    const PRESET_NAME_WEBM = 'webm';
    const PRESET_NAME_WEBMVP8 = 'webm.vp8';
    const PRESET_NAME_WEBMVP9 = 'webm.vp9';
    const PRESET_NAME_XDCAM = 'xdcam';
    const ADVANCED_FPS_CONVERSION_TELESTREAM = 'telestream';
    const ADVANCED_FPS_CONVERSION_TACHYON = 'tachyon';
    const ASPECT_MODE_PRESERVE = 'preserve';
    const ASPECT_MODE_CONSTRAIN = 'constrain';
    const ASPECT_MODE_LETTERBOX = 'letterbox';
    const ASPECT_MODE_PAD = 'pad';
    const ASPECT_MODE_FILL__CROP = 'fill (crop)';
    const ASPECT_MODE_STRETCH = 'stretch';
    const ASPECT_MODE_CENTER = 'center';
    const AUDIO_CHANNELS_LAYOUT__10 = '1.0';
    const AUDIO_CHANNELS_LAYOUT__20 = '2.0';
    const AUDIO_CHANNELS_LAYOUT__21 = '2.1';
    const AUDIO_CHANNELS_LAYOUT__30 = '3.0';
    const AUDIO_CHANNELS_LAYOUT__30_BACK = '3.0(back)';
    const AUDIO_CHANNELS_LAYOUT__31 = '3.1';
    const AUDIO_CHANNELS_LAYOUT__40 = '4.0';
    const AUDIO_CHANNELS_LAYOUT__41 = '4.1';
    const AUDIO_CHANNELS_LAYOUT_QUAD = 'quad';
    const AUDIO_CHANNELS_LAYOUT__50 = '5.0';
    const AUDIO_CHANNELS_LAYOUT__50_SIDE = '5.0(side)';
    const AUDIO_CHANNELS_LAYOUT__51_SIDE = '5.1(side)';
    const AUDIO_CHANNELS_LAYOUT__60 = '6.0';
    const AUDIO_CHANNELS_LAYOUT__61 = '6.1';
    const AUDIO_CHANNELS_LAYOUT__70 = '7.0';
    const AUDIO_CHANNELS_LAYOUT__71 = '7.1';
    const AUDIO_CHANNELS_LAYOUT_MONO = 'mono';
    const AUDIO_CHANNELS_LAYOUT_STEREO = 'stereo';
    const AVCINTRA_CLASS__50 = '50';
    const AVCINTRA_CLASS__100 = '100';
    const CLOSED_CAPTIONS_ADD = 'add';
    const CLOSED_CAPTIONS_BURN = 'burn';
    const DEINTERLACE_KEEP_FPS = 'keep_fps';
    const DEINTERLACE_DOUBLE_FPS = 'double_fps';
    const H264_LEVEL__10 = '1.0';
    const H264_LEVEL__1B = '1b';
    const H264_LEVEL__11 = '1.1';
    const H264_LEVEL__12 = '1.2';
    const H264_LEVEL__13 = '1.3';
    const H264_LEVEL__20 = '2.0';
    const H264_LEVEL__21 = '2.1';
    const H264_LEVEL__22 = '2.2';
    const H264_LEVEL__30 = '3.0';
    const H264_LEVEL__31 = '3.1';
    const H264_LEVEL__32 = '3.2';
    const H264_LEVEL__40 = '4.0';
    const H264_LEVEL__41 = '4.1';
    const H264_LEVEL__42 = '4.2';
    const H264_LEVEL__50 = '5.0';
    const H264_LEVEL__51 = '5.1';
    const H264_PROFILE_BASELINE = 'baseline';
    const H264_PROFILE_MAIN = 'main';
    const H264_PROFILE_HIGH = 'high';
    const H264_PROFILE_HIGH10 = 'high10';
    const H264_PROFILE_HIGH422 = 'high422';
    const H264_PROFILE_HIGH444 = 'high444';
    const H264_TUNE_FILM = 'film';
    const H264_TUNE_ANIMATION = 'animation';
    const H264_TUNE_GRAIN = 'grain';
    const H264_TUNE_PSNR = 'psnr';
    const H264_TUNE_SSIM = 'ssim';
    const H264_TUNE_FASTDECODE = 'fastdecode';
    const H264_TUNE_ZEROLATENCY = 'zerolatency';
    const CODEC_PRESET_ULTRAFAST = 'ultrafast';
    const CODEC_PRESET_SUPERFAST = 'superfast';
    const CODEC_PRESET_VERYFAST = 'veryfast';
    const CODEC_PRESET_FASTER = 'faster';
    const CODEC_PRESET_FAST = 'fast';
    const CODEC_PRESET_MEDIUM = 'medium';
    const CODEC_PRESET_SLOW = 'slow';
    const CODEC_PRESET_SLOWER = 'slower';
    const CODEC_PRESET_VERYSLOW = 'veryslow';
    const CODEC_PRESET_PLACEBO = 'placebo';
    const TELESTREAM_BLOCK_SIZE__16X16 = '16x16';
    const TELESTREAM_BLOCK_SIZE__24X24 = '24x24';
    const TELESTREAM_BLOCK_SIZE__32X32 = '32x32';
    const TACHYON_MOTION_AMOUNT_XLOW = 'xlow';
    const TACHYON_MOTION_AMOUNT_LOW = 'low';
    const TACHYON_MOTION_AMOUNT_MEDIUM = 'medium';
    const TACHYON_MOTION_AMOUNT_HIGH = 'high';
    const TACHYON_MOTION_AMOUNT_XHIGH = 'xhigh';
    const TACHYON_MOTION_AMOUNT_AUTO = 'auto';
    const TACHYON_FALLBACK_SIZE_SMALL = 'small';
    const TACHYON_FALLBACK_SIZE_MEDIUM = 'medium';
    const TACHYON_FALLBACK_SIZE_LARGE = 'large';
    const TACHYON_FALLBACK_SIZE_XLARGE = 'xlarge';
    const TACHYON_FALLBACK_SIZE_AUTO = 'auto';
    const TACHYON_MBLOCK_SIZE_MB16 = 'mb16';
    const TACHYON_MBLOCK_SIZE_MB32 = 'mb32';
    const TACHYON_MBLOCK_SIZE_MB64 = 'mb64';
    const TACHYON_MBLOCK_SIZE_MB128 = 'mb128';
    const TACHYON_MBLOCK_SIZE_MB256 = 'mb256';
    const TACHYON_MBLOCK_SIZE_AUTO = 'auto';
    const EAC3_BITSTREAM_MODE_M0 = 'm0';
    const EAC3_BITSTREAM_MODE_M1 = 'm1';
    const EAC3_BITSTREAM_MODE_M2 = 'm2';
    const EAC3_BITSTREAM_MODE_M3 = 'm3';
    const EAC3_BITSTREAM_MODE_M4 = 'm4';
    const EAC3_BITSTREAM_MODE_M5 = 'm5';
    const EAC3_BITSTREAM_MODE_M6 = 'm6';
    const EAC3_BITSTREAM_MODE_M7 = 'm7';
    const EAC3_STEREO_DOWNMIX_PREFERENCE_M0 = 'm0';
    const EAC3_STEREO_DOWNMIX_PREFERENCE_M1 = 'm1';
    const EAC3_STEREO_DOWNMIX_PREFERENCE_M2 = 'm2';
    const EAC3_STEREO_DOWNMIX_PREFERENCE_M3 = 'm3';
    const EAC3_LT_RT_CENTER_MIX_LEVEL_C0 = 'c0';
    const EAC3_LT_RT_CENTER_MIX_LEVEL_C1 = 'c1';
    const EAC3_LT_RT_CENTER_MIX_LEVEL_C2 = 'c2';
    const EAC3_LT_RT_CENTER_MIX_LEVEL_C3 = 'c3';
    const EAC3_LT_RT_CENTER_MIX_LEVEL_C4 = 'c4';
    const EAC3_LT_RT_CENTER_MIX_LEVEL_C5 = 'c5';
    const EAC3_LT_RT_CENTER_MIX_LEVEL_C6 = 'c6';
    const EAC3_LT_RT_CENTER_MIX_LEVEL_C7 = 'c7';
    const EAC3_LT_RT_SURROUND_MIX_LEVEL_C3 = 'c3';
    const EAC3_LT_RT_SURROUND_MIX_LEVEL_C4 = 'c4';
    const EAC3_LT_RT_SURROUND_MIX_LEVEL_C5 = 'c5';
    const EAC3_LT_RT_SURROUND_MIX_LEVEL_C6 = 'c6';
    const EAC3_LT_RT_SURROUND_MIX_LEVEL_C7 = 'c7';
    const EAC3_LO_RO_CENTER_MIX_LEVEL_C0 = 'c0';
    const EAC3_LO_RO_CENTER_MIX_LEVEL_C1 = 'c1';
    const EAC3_LO_RO_CENTER_MIX_LEVEL_C2 = 'c2';
    const EAC3_LO_RO_CENTER_MIX_LEVEL_C3 = 'c3';
    const EAC3_LO_RO_CENTER_MIX_LEVEL_C4 = 'c4';
    const EAC3_LO_RO_CENTER_MIX_LEVEL_C5 = 'c5';
    const EAC3_LO_RO_CENTER_MIX_LEVEL_C6 = 'c6';
    const EAC3_LO_RO_CENTER_MIX_LEVEL_C7 = 'c7';
    const EAC3_LO_RO_SURROUND_MIX_LEVEL_C3 = 'c3';
    const EAC3_LO_RO_SURROUND_MIX_LEVEL_C4 = 'c4';
    const EAC3_LO_RO_SURROUND_MIX_LEVEL_C5 = 'c5';
    const EAC3_LO_RO_SURROUND_MIX_LEVEL_C6 = 'c6';
    const EAC3_LO_RO_SURROUND_MIX_LEVEL_C7 = 'c7';
    const EAC3_SURROUND_EX_MODE_M0 = 'm0';
    const EAC3_SURROUND_EX_MODE_M1 = 'm1';
    const EAC3_SURROUND_EX_MODE_M2 = 'm2';
    const EAC3_DRC_LINE_MODE_PROFILE_P0 = 'p0';
    const EAC3_DRC_LINE_MODE_PROFILE_P1 = 'p1';
    const EAC3_DRC_LINE_MODE_PROFILE_P2 = 'p2';
    const EAC3_DRC_LINE_MODE_PROFILE_P3 = 'p3';
    const EAC3_DRC_LINE_MODE_PROFILE_P4 = 'p4';
    const EAC3_DRC_LINE_MODE_PROFILE_P5 = 'p5';
    const EAC3_DRC_RF_MODE_PROFILE_P0 = 'p0';
    const EAC3_DRC_RF_MODE_PROFILE_P1 = 'p1';
    const EAC3_DRC_RF_MODE_PROFILE_P2 = 'p2';
    const EAC3_DRC_RF_MODE_PROFILE_P3 = 'p3';
    const EAC3_DRC_RF_MODE_PROFILE_P4 = 'p4';
    const EAC3_DRC_RF_MODE_PROFILE_P5 = 'p5';
    const EAC3_ROOM_TYPE_M0 = 'm0';
    const EAC3_ROOM_TYPE_M1 = 'm1';
    const EAC3_ROOM_TYPE_M2 = 'm2';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPresetNameAllowableValues()
    {
        return [
            self::PRESET_NAME_AAC,
            self::PRESET_NAME_AVCINTRA,
            self::PRESET_NAME_CROCODOC,
            self::PRESET_NAME_DASHVARIANT,
            self::PRESET_NAME_DASHVARIANTAUDIO,
            self::PRESET_NAME_DASHVARIANTWEBVTT,
            self::PRESET_NAME_DASHVARIANTTTML,
            self::PRESET_NAME_DASHVARIANTPLAYLIST,
            self::PRESET_NAME_DASHVARIANTNVENC,
            self::PRESET_NAME_DASHMUXER,
            self::PRESET_NAME_DASHMUXERAUDIO,
            self::PRESET_NAME_DNXHD,
            self::PRESET_NAME_H264,
            self::PRESET_NAME_H264BASELINE,
            self::PRESET_NAME_H264NVENCTELESTREAMMOV,
            self::PRESET_NAME_H264NVENC,
            self::PRESET_NAME_H265,
            self::PRESET_NAME_H2654_K,
            self::PRESET_NAME_HLSMUXER,
            self::PRESET_NAME_HLSMUXERAUDIO,
            self::PRESET_NAME_HLSVARIANT,
            self::PRESET_NAME_HLSVARIANTAUDIO,
            self::PRESET_NAME_HLSVARIANTPLAYLIST,
            self::PRESET_NAME_HLSVARIANTNVENC,
            self::PRESET_NAME_HLSVARIANTWEBVTT,
            self::PRESET_NAME_HSS,
            self::PRESET_NAME_HSSVARIANT,
            self::PRESET_NAME_HSSVARIANTAUDIO,
            self::PRESET_NAME_HSSVARIANTPLAYLIST,
            self::PRESET_NAME_IMX,
            self::PRESET_NAME_IPHONE_AND_IPAD,
            self::PRESET_NAME_JPEG,
            self::PRESET_NAME_M4A,
            self::PRESET_NAME_MP3,
            self::PRESET_NAME_MPEG2,
            self::PRESET_NAME_MPEGPS,
            self::PRESET_NAME_MPEGTSH264,
            self::PRESET_NAME_MPEGTSMPEG2,
            self::PRESET_NAME_OGA,
            self::PRESET_NAME_OGG,
            self::PRESET_NAME_PNG,
            self::PRESET_NAME_PRORES422,
            self::PRESET_NAME_QUICK_ONE_THUMBNAIL,
            self::PRESET_NAME_THUMBNAIL,
            self::PRESET_NAME_TRANSCRIPT,
            self::PRESET_NAME_VORBIS,
            self::PRESET_NAME_WEBM,
            self::PRESET_NAME_WEBMVP8,
            self::PRESET_NAME_WEBMVP9,
            self::PRESET_NAME_XDCAM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAdvancedFpsConversionAllowableValues()
    {
        return [
            self::ADVANCED_FPS_CONVERSION_TELESTREAM,
            self::ADVANCED_FPS_CONVERSION_TACHYON,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAspectModeAllowableValues()
    {
        return [
            self::ASPECT_MODE_PRESERVE,
            self::ASPECT_MODE_CONSTRAIN,
            self::ASPECT_MODE_LETTERBOX,
            self::ASPECT_MODE_PAD,
            self::ASPECT_MODE_FILL__CROP,
            self::ASPECT_MODE_STRETCH,
            self::ASPECT_MODE_CENTER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAudioChannelsLayoutAllowableValues()
    {
        return [
            self::AUDIO_CHANNELS_LAYOUT__10,
            self::AUDIO_CHANNELS_LAYOUT__20,
            self::AUDIO_CHANNELS_LAYOUT__21,
            self::AUDIO_CHANNELS_LAYOUT__30,
            self::AUDIO_CHANNELS_LAYOUT__30_BACK,
            self::AUDIO_CHANNELS_LAYOUT__31,
            self::AUDIO_CHANNELS_LAYOUT__40,
            self::AUDIO_CHANNELS_LAYOUT__41,
            self::AUDIO_CHANNELS_LAYOUT_QUAD,
            self::AUDIO_CHANNELS_LAYOUT__50,
            self::AUDIO_CHANNELS_LAYOUT__50_SIDE,
            self::AUDIO_CHANNELS_LAYOUT__51_SIDE,
            self::AUDIO_CHANNELS_LAYOUT__60,
            self::AUDIO_CHANNELS_LAYOUT__61,
            self::AUDIO_CHANNELS_LAYOUT__70,
            self::AUDIO_CHANNELS_LAYOUT__71,
            self::AUDIO_CHANNELS_LAYOUT_MONO,
            self::AUDIO_CHANNELS_LAYOUT_STEREO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAvcintraClassAllowableValues()
    {
        return [
            self::AVCINTRA_CLASS__50,
            self::AVCINTRA_CLASS__100,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getClosedCaptionsAllowableValues()
    {
        return [
            self::CLOSED_CAPTIONS_ADD,
            self::CLOSED_CAPTIONS_BURN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDeinterlaceAllowableValues()
    {
        return [
            self::DEINTERLACE_KEEP_FPS,
            self::DEINTERLACE_DOUBLE_FPS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getH264LevelAllowableValues()
    {
        return [
            self::H264_LEVEL__10,
            self::H264_LEVEL__1B,
            self::H264_LEVEL__11,
            self::H264_LEVEL__12,
            self::H264_LEVEL__13,
            self::H264_LEVEL__20,
            self::H264_LEVEL__21,
            self::H264_LEVEL__22,
            self::H264_LEVEL__30,
            self::H264_LEVEL__31,
            self::H264_LEVEL__32,
            self::H264_LEVEL__40,
            self::H264_LEVEL__41,
            self::H264_LEVEL__42,
            self::H264_LEVEL__50,
            self::H264_LEVEL__51,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getH264ProfileAllowableValues()
    {
        return [
            self::H264_PROFILE_BASELINE,
            self::H264_PROFILE_MAIN,
            self::H264_PROFILE_HIGH,
            self::H264_PROFILE_HIGH10,
            self::H264_PROFILE_HIGH422,
            self::H264_PROFILE_HIGH444,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getH264TuneAllowableValues()
    {
        return [
            self::H264_TUNE_FILM,
            self::H264_TUNE_ANIMATION,
            self::H264_TUNE_GRAIN,
            self::H264_TUNE_PSNR,
            self::H264_TUNE_SSIM,
            self::H264_TUNE_FASTDECODE,
            self::H264_TUNE_ZEROLATENCY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCodecPresetAllowableValues()
    {
        return [
            self::CODEC_PRESET_ULTRAFAST,
            self::CODEC_PRESET_SUPERFAST,
            self::CODEC_PRESET_VERYFAST,
            self::CODEC_PRESET_FASTER,
            self::CODEC_PRESET_FAST,
            self::CODEC_PRESET_MEDIUM,
            self::CODEC_PRESET_SLOW,
            self::CODEC_PRESET_SLOWER,
            self::CODEC_PRESET_VERYSLOW,
            self::CODEC_PRESET_PLACEBO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTelestreamBlockSizeAllowableValues()
    {
        return [
            self::TELESTREAM_BLOCK_SIZE__16X16,
            self::TELESTREAM_BLOCK_SIZE__24X24,
            self::TELESTREAM_BLOCK_SIZE__32X32,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTachyonMotionAmountAllowableValues()
    {
        return [
            self::TACHYON_MOTION_AMOUNT_XLOW,
            self::TACHYON_MOTION_AMOUNT_LOW,
            self::TACHYON_MOTION_AMOUNT_MEDIUM,
            self::TACHYON_MOTION_AMOUNT_HIGH,
            self::TACHYON_MOTION_AMOUNT_XHIGH,
            self::TACHYON_MOTION_AMOUNT_AUTO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTachyonFallbackSizeAllowableValues()
    {
        return [
            self::TACHYON_FALLBACK_SIZE_SMALL,
            self::TACHYON_FALLBACK_SIZE_MEDIUM,
            self::TACHYON_FALLBACK_SIZE_LARGE,
            self::TACHYON_FALLBACK_SIZE_XLARGE,
            self::TACHYON_FALLBACK_SIZE_AUTO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTachyonMblockSizeAllowableValues()
    {
        return [
            self::TACHYON_MBLOCK_SIZE_MB16,
            self::TACHYON_MBLOCK_SIZE_MB32,
            self::TACHYON_MBLOCK_SIZE_MB64,
            self::TACHYON_MBLOCK_SIZE_MB128,
            self::TACHYON_MBLOCK_SIZE_MB256,
            self::TACHYON_MBLOCK_SIZE_AUTO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEac3BitstreamModeAllowableValues()
    {
        return [
            self::EAC3_BITSTREAM_MODE_M0,
            self::EAC3_BITSTREAM_MODE_M1,
            self::EAC3_BITSTREAM_MODE_M2,
            self::EAC3_BITSTREAM_MODE_M3,
            self::EAC3_BITSTREAM_MODE_M4,
            self::EAC3_BITSTREAM_MODE_M5,
            self::EAC3_BITSTREAM_MODE_M6,
            self::EAC3_BITSTREAM_MODE_M7,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEac3StereoDownmixPreferenceAllowableValues()
    {
        return [
            self::EAC3_STEREO_DOWNMIX_PREFERENCE_M0,
            self::EAC3_STEREO_DOWNMIX_PREFERENCE_M1,
            self::EAC3_STEREO_DOWNMIX_PREFERENCE_M2,
            self::EAC3_STEREO_DOWNMIX_PREFERENCE_M3,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEac3LtRtCenterMixLevelAllowableValues()
    {
        return [
            self::EAC3_LT_RT_CENTER_MIX_LEVEL_C0,
            self::EAC3_LT_RT_CENTER_MIX_LEVEL_C1,
            self::EAC3_LT_RT_CENTER_MIX_LEVEL_C2,
            self::EAC3_LT_RT_CENTER_MIX_LEVEL_C3,
            self::EAC3_LT_RT_CENTER_MIX_LEVEL_C4,
            self::EAC3_LT_RT_CENTER_MIX_LEVEL_C5,
            self::EAC3_LT_RT_CENTER_MIX_LEVEL_C6,
            self::EAC3_LT_RT_CENTER_MIX_LEVEL_C7,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEac3LtRtSurroundMixLevelAllowableValues()
    {
        return [
            self::EAC3_LT_RT_SURROUND_MIX_LEVEL_C3,
            self::EAC3_LT_RT_SURROUND_MIX_LEVEL_C4,
            self::EAC3_LT_RT_SURROUND_MIX_LEVEL_C5,
            self::EAC3_LT_RT_SURROUND_MIX_LEVEL_C6,
            self::EAC3_LT_RT_SURROUND_MIX_LEVEL_C7,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEac3LoRoCenterMixLevelAllowableValues()
    {
        return [
            self::EAC3_LO_RO_CENTER_MIX_LEVEL_C0,
            self::EAC3_LO_RO_CENTER_MIX_LEVEL_C1,
            self::EAC3_LO_RO_CENTER_MIX_LEVEL_C2,
            self::EAC3_LO_RO_CENTER_MIX_LEVEL_C3,
            self::EAC3_LO_RO_CENTER_MIX_LEVEL_C4,
            self::EAC3_LO_RO_CENTER_MIX_LEVEL_C5,
            self::EAC3_LO_RO_CENTER_MIX_LEVEL_C6,
            self::EAC3_LO_RO_CENTER_MIX_LEVEL_C7,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEac3LoRoSurroundMixLevelAllowableValues()
    {
        return [
            self::EAC3_LO_RO_SURROUND_MIX_LEVEL_C3,
            self::EAC3_LO_RO_SURROUND_MIX_LEVEL_C4,
            self::EAC3_LO_RO_SURROUND_MIX_LEVEL_C5,
            self::EAC3_LO_RO_SURROUND_MIX_LEVEL_C6,
            self::EAC3_LO_RO_SURROUND_MIX_LEVEL_C7,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEac3SurroundExModeAllowableValues()
    {
        return [
            self::EAC3_SURROUND_EX_MODE_M0,
            self::EAC3_SURROUND_EX_MODE_M1,
            self::EAC3_SURROUND_EX_MODE_M2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEac3DrcLineModeProfileAllowableValues()
    {
        return [
            self::EAC3_DRC_LINE_MODE_PROFILE_P0,
            self::EAC3_DRC_LINE_MODE_PROFILE_P1,
            self::EAC3_DRC_LINE_MODE_PROFILE_P2,
            self::EAC3_DRC_LINE_MODE_PROFILE_P3,
            self::EAC3_DRC_LINE_MODE_PROFILE_P4,
            self::EAC3_DRC_LINE_MODE_PROFILE_P5,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEac3DrcRfModeProfileAllowableValues()
    {
        return [
            self::EAC3_DRC_RF_MODE_PROFILE_P0,
            self::EAC3_DRC_RF_MODE_PROFILE_P1,
            self::EAC3_DRC_RF_MODE_PROFILE_P2,
            self::EAC3_DRC_RF_MODE_PROFILE_P3,
            self::EAC3_DRC_RF_MODE_PROFILE_P4,
            self::EAC3_DRC_RF_MODE_PROFILE_P5,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEac3RoomTypeAllowableValues()
    {
        return [
            self::EAC3_ROOM_TYPE_M0,
            self::EAC3_ROOM_TYPE_M1,
            self::EAC3_ROOM_TYPE_M2,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['preset_name'] = isset($data['preset_name']) ? $data['preset_name'] : null;
        $this->container['advanced_fps_conversion'] = isset($data['advanced_fps_conversion']) ? $data['advanced_fps_conversion'] : null;
        $this->container['aspect_mode'] = isset($data['aspect_mode']) ? $data['aspect_mode'] : null;
        $this->container['aspect_ratio'] = isset($data['aspect_ratio']) ? $data['aspect_ratio'] : null;
        $this->container['audio_bitrate'] = isset($data['audio_bitrate']) ? $data['audio_bitrate'] : null;
        $this->container['audio_channels'] = isset($data['audio_channels']) ? $data['audio_channels'] : null;
        $this->container['audio_channels_layout'] = isset($data['audio_channels_layout']) ? $data['audio_channels_layout'] : null;
        $this->container['audio_channels_per_track'] = isset($data['audio_channels_per_track']) ? $data['audio_channels_per_track'] : null;
        $this->container['audio_codec'] = isset($data['audio_codec']) ? $data['audio_codec'] : null;
        $this->container['audio_format'] = isset($data['audio_format']) ? $data['audio_format'] : null;
        $this->container['audio_pid'] = isset($data['audio_pid']) ? $data['audio_pid'] : null;
        $this->container['audio_profile'] = isset($data['audio_profile']) ? $data['audio_profile'] : null;
        $this->container['audio_sample_rate'] = isset($data['audio_sample_rate']) ? $data['audio_sample_rate'] : null;
        $this->container['audio_streams'] = isset($data['audio_streams']) ? $data['audio_streams'] : null;
        $this->container['avcintra_class'] = isset($data['avcintra_class']) ? $data['avcintra_class'] : null;
        $this->container['buffer_size'] = isset($data['buffer_size']) ? $data['buffer_size'] : null;
        $this->container['buffer_size_in_packets'] = isset($data['buffer_size_in_packets']) ? $data['buffer_size_in_packets'] : null;
        $this->container['clip_length'] = isset($data['clip_length']) ? $data['clip_length'] : null;
        $this->container['clip_offset'] = isset($data['clip_offset']) ? $data['clip_offset'] : null;
        $this->container['closed_captions'] = isset($data['closed_captions']) ? $data['closed_captions'] : null;
        $this->container['dash_profile'] = isset($data['dash_profile']) ? $data['dash_profile'] : null;
        $this->container['deinterlace'] = isset($data['deinterlace']) ? $data['deinterlace'] : null;
        $this->container['deinterlace_frames'] = isset($data['deinterlace_frames']) ? $data['deinterlace_frames'] : null;
        $this->container['dnxhd_type'] = isset($data['dnxhd_type']) ? $data['dnxhd_type'] : null;
        $this->container['encryption'] = isset($data['encryption']) ? $data['encryption'] : null;
        $this->container['extname'] = isset($data['extname']) ? $data['extname'] : null;
        $this->container['fps'] = isset($data['fps']) ? $data['fps'] : null;
        $this->container['frame_offsets'] = isset($data['frame_offsets']) ? $data['frame_offsets'] : null;
        $this->container['frame_interval'] = isset($data['frame_interval']) ? $data['frame_interval'] : null;
        $this->container['frame_count'] = isset($data['frame_count']) ? $data['frame_count'] : null;
        $this->container['h264_level'] = isset($data['h264_level']) ? $data['h264_level'] : null;
        $this->container['h264_profile'] = isset($data['h264_profile']) ? $data['h264_profile'] : null;
        $this->container['h264_tune'] = isset($data['h264_tune']) ? $data['h264_tune'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['imx_type'] = isset($data['imx_type']) ? $data['imx_type'] : null;
        $this->container['interlace'] = isset($data['interlace']) ? $data['interlace'] : null;
        $this->container['keyframe_interval'] = isset($data['keyframe_interval']) ? $data['keyframe_interval'] : null;
        $this->container['keyframe_rate'] = isset($data['keyframe_rate']) ? $data['keyframe_rate'] : null;
        $this->container['max_rate'] = isset($data['max_rate']) ? $data['max_rate'] : null;
        $this->container['merge_audio_streams'] = isset($data['merge_audio_streams']) ? $data['merge_audio_streams'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['outputs_path_format'] = isset($data['outputs_path_format']) ? $data['outputs_path_format'] : null;
        $this->container['pmt_pid'] = isset($data['pmt_pid']) ? $data['pmt_pid'] : null;
        $this->container['prores_format'] = isset($data['prores_format']) ? $data['prores_format'] : null;
        $this->container['segment_time'] = isset($data['segment_time']) ? $data['segment_time'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['tar'] = isset($data['tar']) ? $data['tar'] : null;
        $this->container['transport_rate'] = isset($data['transport_rate']) ? $data['transport_rate'] : null;
        $this->container['ts_pids'] = isset($data['ts_pids']) ? $data['ts_pids'] : null;
        $this->container['upscale'] = isset($data['upscale']) ? $data['upscale'] : null;
        $this->container['variants'] = isset($data['variants']) ? $data['variants'] : null;
        $this->container['video_bitrate'] = isset($data['video_bitrate']) ? $data['video_bitrate'] : null;
        $this->container['video_pid'] = isset($data['video_pid']) ? $data['video_pid'] : null;
        $this->container['watermark_bottom'] = isset($data['watermark_bottom']) ? $data['watermark_bottom'] : null;
        $this->container['watermark_height'] = isset($data['watermark_height']) ? $data['watermark_height'] : null;
        $this->container['watermark_left'] = isset($data['watermark_left']) ? $data['watermark_left'] : null;
        $this->container['watermark_right'] = isset($data['watermark_right']) ? $data['watermark_right'] : null;
        $this->container['watermark_top'] = isset($data['watermark_top']) ? $data['watermark_top'] : null;
        $this->container['watermark_url'] = isset($data['watermark_url']) ? $data['watermark_url'] : null;
        $this->container['watermark_width'] = isset($data['watermark_width']) ? $data['watermark_width'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['x264_options'] = isset($data['x264_options']) ? $data['x264_options'] : null;
        $this->container['x265_options'] = isset($data['x265_options']) ? $data['x265_options'] : null;
        $this->container['xdcam_format'] = isset($data['xdcam_format']) ? $data['xdcam_format'] : null;
        $this->container['mute_audio_tracks'] = isset($data['mute_audio_tracks']) ? $data['mute_audio_tracks'] : null;
        $this->container['byte_range_requests'] = isset($data['byte_range_requests']) ? $data['byte_range_requests'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['use_editlist'] = isset($data['use_editlist']) ? $data['use_editlist'] : null;
        $this->container['audio_map'] = isset($data['audio_map']) ? $data['audio_map'] : null;
        $this->container['audio_stream_id'] = isset($data['audio_stream_id']) ? $data['audio_stream_id'] : null;
        $this->container['bumpers'] = isset($data['bumpers']) ? $data['bumpers'] : null;
        $this->container['codec_preset'] = isset($data['codec_preset']) ? $data['codec_preset'] : null;
        $this->container['color_metadata'] = isset($data['color_metadata']) ? $data['color_metadata'] : null;
        $this->container['crop_input_bottom'] = isset($data['crop_input_bottom']) ? $data['crop_input_bottom'] : null;
        $this->container['crop_input_height'] = isset($data['crop_input_height']) ? $data['crop_input_height'] : null;
        $this->container['crop_input_left'] = isset($data['crop_input_left']) ? $data['crop_input_left'] : null;
        $this->container['crop_input_right'] = isset($data['crop_input_right']) ? $data['crop_input_right'] : null;
        $this->container['crop_input_top'] = isset($data['crop_input_top']) ? $data['crop_input_top'] : null;
        $this->container['crop_input_width'] = isset($data['crop_input_width']) ? $data['crop_input_width'] : null;
        $this->container['dynamic_recipe'] = isset($data['dynamic_recipe']) ? $data['dynamic_recipe'] : null;
        $this->container['playlist_type'] = isset($data['playlist_type']) ? $data['playlist_type'] : null;
        $this->container['preset_version'] = isset($data['preset_version']) ? $data['preset_version'] : null;
        $this->container['segment_delimiter'] = isset($data['segment_delimiter']) ? $data['segment_delimiter'] : null;
        $this->container['sws_flags'] = isset($data['sws_flags']) ? $data['sws_flags'] : null;
        $this->container['telestream_block_size'] = isset($data['telestream_block_size']) ? $data['telestream_block_size'] : null;
        $this->container['telestream_blur_scaler'] = isset($data['telestream_blur_scaler']) ? $data['telestream_blur_scaler'] : null;
        $this->container['telestream_cost_scaler'] = isset($data['telestream_cost_scaler']) ? $data['telestream_cost_scaler'] : null;
        $this->container['telestream_search_length_scaler'] = isset($data['telestream_search_length_scaler']) ? $data['telestream_search_length_scaler'] : null;
        $this->container['telestream_subpel_mode'] = isset($data['telestream_subpel_mode']) ? $data['telestream_subpel_mode'] : null;
        $this->container['trailers'] = isset($data['trailers']) ? $data['trailers'] : null;
        $this->container['vantage_group_id'] = isset($data['vantage_group_id']) ? $data['vantage_group_id'] : null;
        $this->container['watermark_bumpers'] = isset($data['watermark_bumpers']) ? $data['watermark_bumpers'] : null;
        $this->container['watermark_trailers'] = isset($data['watermark_trailers']) ? $data['watermark_trailers'] : null;
        $this->container['workorder_criteria'] = isset($data['workorder_criteria']) ? $data['workorder_criteria'] : null;
        $this->container['tachyon_allow_remove_pulldown'] = isset($data['tachyon_allow_remove_pulldown']) ? $data['tachyon_allow_remove_pulldown'] : null;
        $this->container['tachyon_enable_post_pulldown_filter'] = isset($data['tachyon_enable_post_pulldown_filter']) ? $data['tachyon_enable_post_pulldown_filter'] : null;
        $this->container['tachyon_media_hint_is_cartoon'] = isset($data['tachyon_media_hint_is_cartoon']) ? $data['tachyon_media_hint_is_cartoon'] : null;
        $this->container['tachyon_media_hint_has_chroma_noise'] = isset($data['tachyon_media_hint_has_chroma_noise']) ? $data['tachyon_media_hint_has_chroma_noise'] : null;
        $this->container['tachyon_more_sensitive_remove_pulldown'] = isset($data['tachyon_more_sensitive_remove_pulldown']) ? $data['tachyon_more_sensitive_remove_pulldown'] : null;
        $this->container['tachyon_allow_add_standard_pd'] = isset($data['tachyon_allow_add_standard_pd']) ? $data['tachyon_allow_add_standard_pd'] : null;
        $this->container['tachyon_allow_add_2_2pd'] = isset($data['tachyon_allow_add_2_2pd']) ? $data['tachyon_allow_add_2_2pd'] : null;
        $this->container['tachyon_allow_add_4_4pd'] = isset($data['tachyon_allow_add_4_4pd']) ? $data['tachyon_allow_add_4_4pd'] : null;
        $this->container['tachyon_allow_add_4_6pd'] = isset($data['tachyon_allow_add_4_6pd']) ? $data['tachyon_allow_add_4_6pd'] : null;
        $this->container['tachyon_allow_add_euro_pd'] = isset($data['tachyon_allow_add_euro_pd']) ? $data['tachyon_allow_add_euro_pd'] : null;
        $this->container['tachyon_allow_add_adaptive_pd'] = isset($data['tachyon_allow_add_adaptive_pd']) ? $data['tachyon_allow_add_adaptive_pd'] : null;
        $this->container['tachyon_motion_amount'] = isset($data['tachyon_motion_amount']) ? $data['tachyon_motion_amount'] : null;
        $this->container['tachyon_fallback_size'] = isset($data['tachyon_fallback_size']) ? $data['tachyon_fallback_size'] : null;
        $this->container['tachyon_mblock_size'] = isset($data['tachyon_mblock_size']) ? $data['tachyon_mblock_size'] : null;
        $this->container['tachyon_cut_detection_sensitivity'] = isset($data['tachyon_cut_detection_sensitivity']) ? $data['tachyon_cut_detection_sensitivity'] : null;
        $this->container['eac3_evolution_enable'] = isset($data['eac3_evolution_enable']) ? $data['eac3_evolution_enable'] : null;
        $this->container['eac3_bitstream_mode'] = isset($data['eac3_bitstream_mode']) ? $data['eac3_bitstream_mode'] : null;
        $this->container['eac3_ninety_degree_phase_shift'] = isset($data['eac3_ninety_degree_phase_shift']) ? $data['eac3_ninety_degree_phase_shift'] : null;
        $this->container['eac3_three_decibel_attenuation'] = isset($data['eac3_three_decibel_attenuation']) ? $data['eac3_three_decibel_attenuation'] : null;
        $this->container['eac3_enable_lfe_low_pass_filter'] = isset($data['eac3_enable_lfe_low_pass_filter']) ? $data['eac3_enable_lfe_low_pass_filter'] : null;
        $this->container['eac3_analog_to_digital_converter_type'] = isset($data['eac3_analog_to_digital_converter_type']) ? $data['eac3_analog_to_digital_converter_type'] : null;
        $this->container['eac3_stereo_downmix_preference'] = isset($data['eac3_stereo_downmix_preference']) ? $data['eac3_stereo_downmix_preference'] : null;
        $this->container['eac3_lt_rt_center_mix_level'] = isset($data['eac3_lt_rt_center_mix_level']) ? $data['eac3_lt_rt_center_mix_level'] : null;
        $this->container['eac3_lt_rt_surround_mix_level'] = isset($data['eac3_lt_rt_surround_mix_level']) ? $data['eac3_lt_rt_surround_mix_level'] : null;
        $this->container['eac3_lo_ro_center_mix_level'] = isset($data['eac3_lo_ro_center_mix_level']) ? $data['eac3_lo_ro_center_mix_level'] : null;
        $this->container['eac3_lo_ro_surround_mix_level'] = isset($data['eac3_lo_ro_surround_mix_level']) ? $data['eac3_lo_ro_surround_mix_level'] : null;
        $this->container['eac3_surround_ex_mode'] = isset($data['eac3_surround_ex_mode']) ? $data['eac3_surround_ex_mode'] : null;
        $this->container['eac3_drc_line_mode_profile'] = isset($data['eac3_drc_line_mode_profile']) ? $data['eac3_drc_line_mode_profile'] : null;
        $this->container['eac3_drc_rf_mode_profile'] = isset($data['eac3_drc_rf_mode_profile']) ? $data['eac3_drc_rf_mode_profile'] : null;
        $this->container['eac3_dialog_normalization'] = isset($data['eac3_dialog_normalization']) ? $data['eac3_dialog_normalization'] : null;
        $this->container['eac3_room_type'] = isset($data['eac3_room_type']) ? $data['eac3_room_type'] : null;
        $this->container['eac3_mixing_level'] = isset($data['eac3_mixing_level']) ? $data['eac3_mixing_level'] : null;
        $this->container['eac3_copyright_protected'] = isset($data['eac3_copyright_protected']) ? $data['eac3_copyright_protected'] : null;
        $this->container['eac3_original_bitstream'] = isset($data['eac3_original_bitstream']) ? $data['eac3_original_bitstream'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['time_code'] = isset($data['time_code']) ? $data['time_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['preset_name'] === null) {
            $invalid_properties[] = "'preset_name' can't be null";
        }
        $allowed_values = $this->getPresetNameAllowableValues();
        if (!in_array($this->container['preset_name'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'preset_name', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getAdvancedFpsConversionAllowableValues();
        if (!in_array($this->container['advanced_fps_conversion'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'advanced_fps_conversion', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getAspectModeAllowableValues();
        if (!in_array($this->container['aspect_mode'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'aspect_mode', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getAudioChannelsLayoutAllowableValues();
        if (!in_array($this->container['audio_channels_layout'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'audio_channels_layout', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getAvcintraClassAllowableValues();
        if (!in_array($this->container['avcintra_class'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'avcintra_class', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getClosedCaptionsAllowableValues();
        if (!in_array($this->container['closed_captions'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'closed_captions', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getDeinterlaceAllowableValues();
        if (!in_array($this->container['deinterlace'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'deinterlace', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getH264LevelAllowableValues();
        if (!in_array($this->container['h264_level'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'h264_level', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getH264ProfileAllowableValues();
        if (!in_array($this->container['h264_profile'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'h264_profile', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getH264TuneAllowableValues();
        if (!in_array($this->container['h264_tune'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'h264_tune', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getCodecPresetAllowableValues();
        if (!in_array($this->container['codec_preset'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'codec_preset', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getTelestreamBlockSizeAllowableValues();
        if (!in_array($this->container['telestream_block_size'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'telestream_block_size', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getTachyonMotionAmountAllowableValues();
        if (!in_array($this->container['tachyon_motion_amount'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'tachyon_motion_amount', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getTachyonFallbackSizeAllowableValues();
        if (!in_array($this->container['tachyon_fallback_size'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'tachyon_fallback_size', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getTachyonMblockSizeAllowableValues();
        if (!in_array($this->container['tachyon_mblock_size'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'tachyon_mblock_size', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getEac3BitstreamModeAllowableValues();
        if (!in_array($this->container['eac3_bitstream_mode'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'eac3_bitstream_mode', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getEac3StereoDownmixPreferenceAllowableValues();
        if (!in_array($this->container['eac3_stereo_downmix_preference'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'eac3_stereo_downmix_preference', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getEac3LtRtCenterMixLevelAllowableValues();
        if (!in_array($this->container['eac3_lt_rt_center_mix_level'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'eac3_lt_rt_center_mix_level', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getEac3LtRtSurroundMixLevelAllowableValues();
        if (!in_array($this->container['eac3_lt_rt_surround_mix_level'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'eac3_lt_rt_surround_mix_level', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getEac3LoRoCenterMixLevelAllowableValues();
        if (!in_array($this->container['eac3_lo_ro_center_mix_level'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'eac3_lo_ro_center_mix_level', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getEac3LoRoSurroundMixLevelAllowableValues();
        if (!in_array($this->container['eac3_lo_ro_surround_mix_level'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'eac3_lo_ro_surround_mix_level', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getEac3SurroundExModeAllowableValues();
        if (!in_array($this->container['eac3_surround_ex_mode'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'eac3_surround_ex_mode', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getEac3DrcLineModeProfileAllowableValues();
        if (!in_array($this->container['eac3_drc_line_mode_profile'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'eac3_drc_line_mode_profile', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getEac3DrcRfModeProfileAllowableValues();
        if (!in_array($this->container['eac3_drc_rf_mode_profile'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'eac3_drc_rf_mode_profile', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getEac3RoomTypeAllowableValues();
        if (!in_array($this->container['eac3_room_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'eac3_room_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['preset_name'] === null) {
            return false;
        }
        $allowed_values = $this->getPresetNameAllowableValues();
        if (!in_array($this->container['preset_name'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getAdvancedFpsConversionAllowableValues();
        if (!in_array($this->container['advanced_fps_conversion'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getAspectModeAllowableValues();
        if (!in_array($this->container['aspect_mode'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getAudioChannelsLayoutAllowableValues();
        if (!in_array($this->container['audio_channels_layout'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getAvcintraClassAllowableValues();
        if (!in_array($this->container['avcintra_class'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getClosedCaptionsAllowableValues();
        if (!in_array($this->container['closed_captions'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getDeinterlaceAllowableValues();
        if (!in_array($this->container['deinterlace'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getH264LevelAllowableValues();
        if (!in_array($this->container['h264_level'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getH264ProfileAllowableValues();
        if (!in_array($this->container['h264_profile'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getH264TuneAllowableValues();
        if (!in_array($this->container['h264_tune'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getCodecPresetAllowableValues();
        if (!in_array($this->container['codec_preset'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getTelestreamBlockSizeAllowableValues();
        if (!in_array($this->container['telestream_block_size'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getTachyonMotionAmountAllowableValues();
        if (!in_array($this->container['tachyon_motion_amount'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getTachyonFallbackSizeAllowableValues();
        if (!in_array($this->container['tachyon_fallback_size'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getTachyonMblockSizeAllowableValues();
        if (!in_array($this->container['tachyon_mblock_size'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getEac3BitstreamModeAllowableValues();
        if (!in_array($this->container['eac3_bitstream_mode'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getEac3StereoDownmixPreferenceAllowableValues();
        if (!in_array($this->container['eac3_stereo_downmix_preference'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getEac3LtRtCenterMixLevelAllowableValues();
        if (!in_array($this->container['eac3_lt_rt_center_mix_level'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getEac3LtRtSurroundMixLevelAllowableValues();
        if (!in_array($this->container['eac3_lt_rt_surround_mix_level'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getEac3LoRoCenterMixLevelAllowableValues();
        if (!in_array($this->container['eac3_lo_ro_center_mix_level'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getEac3LoRoSurroundMixLevelAllowableValues();
        if (!in_array($this->container['eac3_lo_ro_surround_mix_level'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getEac3SurroundExModeAllowableValues();
        if (!in_array($this->container['eac3_surround_ex_mode'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getEac3DrcLineModeProfileAllowableValues();
        if (!in_array($this->container['eac3_drc_line_mode_profile'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getEac3DrcRfModeProfileAllowableValues();
        if (!in_array($this->container['eac3_drc_rf_mode_profile'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getEac3RoomTypeAllowableValues();
        if (!in_array($this->container['eac3_room_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets preset_name
     * @return string
     */
    public function getPresetName()
    {
        return $this->container['preset_name'];
    }

    /**
     * Sets preset_name
     * @param string $preset_name a name of a preset that a profile will use.
     * @return $this
     */
    public function setPresetName($preset_name)
    {
        $allowed_values = $this->getPresetNameAllowableValues();
        if (!in_array($preset_name, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'preset_name', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['preset_name'] = $preset_name;

        return $this;
    }

    /**
     * Gets advanced_fps_conversion
     * @return string
     */
    public function getAdvancedFpsConversion()
    {
        return $this->container['advanced_fps_conversion'];
    }

    /**
     * Sets advanced_fps_conversion
     * @param string $advanced_fps_conversion todo
     * @return $this
     */
    public function setAdvancedFpsConversion($advanced_fps_conversion)
    {
        $allowed_values = $this->getAdvancedFpsConversionAllowableValues();
        if (!is_null($advanced_fps_conversion) && !in_array($advanced_fps_conversion, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'advanced_fps_conversion', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['advanced_fps_conversion'] = $advanced_fps_conversion;

        return $this;
    }

    /**
     * Gets aspect_mode
     * @return string
     */
    public function getAspectMode()
    {
        return $this->container['aspect_mode'];
    }

    /**
     * Sets aspect_mode
     * @param string $aspect_mode Default is \"letterbox\".
     * @return $this
     */
    public function setAspectMode($aspect_mode)
    {
        $allowed_values = $this->getAspectModeAllowableValues();
        if (!is_null($aspect_mode) && !in_array($aspect_mode, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'aspect_mode', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['aspect_mode'] = $aspect_mode;

        return $this;
    }

    /**
     * Gets aspect_ratio
     * @return string
     */
    public function getAspectRatio()
    {
        return $this->container['aspect_ratio'];
    }

    /**
     * Sets aspect_ratio
     * @param string $aspect_ratio Sets the desired display aspect ratio. By default it is not set.
     * @return $this
     */
    public function setAspectRatio($aspect_ratio)
    {
        $this->container['aspect_ratio'] = $aspect_ratio;

        return $this;
    }

    /**
     * Gets audio_bitrate
     * @return int
     */
    public function getAudioBitrate()
    {
        return $this->container['audio_bitrate'];
    }

    /**
     * Sets audio_bitrate
     * @param int $audio_bitrate audio bitrate (in bits/s)
     * @return $this
     */
    public function setAudioBitrate($audio_bitrate)
    {
        $this->container['audio_bitrate'] = $audio_bitrate;

        return $this;
    }

    /**
     * Gets audio_channels
     * @return int
     */
    public function getAudioChannels()
    {
        return $this->container['audio_channels'];
    }

    /**
     * Sets audio_channels
     * @param int $audio_channels Sets the number of audio channels. By default it is not set.
     * @return $this
     */
    public function setAudioChannels($audio_channels)
    {
        $this->container['audio_channels'] = $audio_channels;

        return $this;
    }

    /**
     * Gets audio_channels_layout
     * @return string
     */
    public function getAudioChannelsLayout()
    {
        return $this->container['audio_channels_layout'];
    }

    /**
     * Sets audio_channels_layout
     * @param string $audio_channels_layout A channel layout specifies the spatial disposition of the channels in a multi-channel audio stream.
     * @return $this
     */
    public function setAudioChannelsLayout($audio_channels_layout)
    {
        $allowed_values = $this->getAudioChannelsLayoutAllowableValues();
        if (!is_null($audio_channels_layout) && !in_array($audio_channels_layout, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'audio_channels_layout', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['audio_channels_layout'] = $audio_channels_layout;

        return $this;
    }

    /**
     * Gets audio_channels_per_track
     * @return string
     */
    public function getAudioChannelsPerTrack()
    {
        return $this->container['audio_channels_per_track'];
    }

    /**
     * Sets audio_channels_per_track
     * @param string $audio_channels_per_track Sets the number of audio channels per track.
     * @return $this
     */
    public function setAudioChannelsPerTrack($audio_channels_per_track)
    {
        $this->container['audio_channels_per_track'] = $audio_channels_per_track;

        return $this;
    }

    /**
     * Gets audio_codec
     * @return string
     */
    public function getAudioCodec()
    {
        return $this->container['audio_codec'];
    }

    /**
     * Sets audio_codec
     * @param string $audio_codec Audio codec that will be used by the profile.
     * @return $this
     */
    public function setAudioCodec($audio_codec)
    {
        $this->container['audio_codec'] = $audio_codec;

        return $this;
    }

    /**
     * Gets audio_format
     * @return string
     */
    public function getAudioFormat()
    {
        return $this->container['audio_format'];
    }

    /**
     * Sets audio_format
     * @param string $audio_format Specifies an audio container.
     * @return $this
     */
    public function setAudioFormat($audio_format)
    {
        $this->container['audio_format'] = $audio_format;

        return $this;
    }

    /**
     * Gets audio_pid
     * @return string
     */
    public function getAudioPid()
    {
        return $this->container['audio_pid'];
    }

    /**
     * Sets audio_pid
     * @param string $audio_pid Packet identifier used by MPEG formats.
     * @return $this
     */
    public function setAudioPid($audio_pid)
    {
        $this->container['audio_pid'] = $audio_pid;

        return $this;
    }

    /**
     * Gets audio_profile
     * @return string
     */
    public function getAudioProfile()
    {
        return $this->container['audio_profile'];
    }

    /**
     * Sets audio_profile
     * @param string $audio_profile Sets an audio profile.
     * @return $this
     */
    public function setAudioProfile($audio_profile)
    {
        $this->container['audio_profile'] = $audio_profile;

        return $this;
    }

    /**
     * Gets audio_sample_rate
     * @return int
     */
    public function getAudioSampleRate()
    {
        return $this->container['audio_sample_rate'];
    }

    /**
     * Sets audio_sample_rate
     * @param int $audio_sample_rate The number of samples of audio carried per second.
     * @return $this
     */
    public function setAudioSampleRate($audio_sample_rate)
    {
        $this->container['audio_sample_rate'] = $audio_sample_rate;

        return $this;
    }

    /**
     * Gets audio_streams
     * @return int
     */
    public function getAudioStreams()
    {
        return $this->container['audio_streams'];
    }

    /**
     * Sets audio_streams
     * @param int $audio_streams Sets the number of audio streams.
     * @return $this
     */
    public function setAudioStreams($audio_streams)
    {
        $this->container['audio_streams'] = $audio_streams;

        return $this;
    }

    /**
     * Gets avcintra_class
     * @return string
     */
    public function getAvcintraClass()
    {
        return $this->container['avcintra_class'];
    }

    /**
     * Sets avcintra_class
     * @param string $avcintra_class class of the AVC-Intra video coding.
     * @return $this
     */
    public function setAvcintraClass($avcintra_class)
    {
        $allowed_values = $this->getAvcintraClassAllowableValues();
        if (!is_null($avcintra_class) && !in_array($avcintra_class, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'avcintra_class', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['avcintra_class'] = $avcintra_class;

        return $this;
    }

    /**
     * Gets buffer_size
     * @return string
     */
    public function getBufferSize()
    {
        return $this->container['buffer_size'];
    }

    /**
     * Sets buffer_size
     * @param string $buffer_size Sets the buffer size, and can be 1-2 seconds for most gaming screencasts, and up to 5 seconds for more static content. You will have to experiment to see what looks best for your content.
     * @return $this
     */
    public function setBufferSize($buffer_size)
    {
        $this->container['buffer_size'] = $buffer_size;

        return $this;
    }

    /**
     * Gets buffer_size_in_packets
     * @return string
     */
    public function getBufferSizeInPackets()
    {
        return $this->container['buffer_size_in_packets'];
    }

    /**
     * Sets buffer_size_in_packets
     * @param string $buffer_size_in_packets todo
     * @return $this
     */
    public function setBufferSizeInPackets($buffer_size_in_packets)
    {
        $this->container['buffer_size_in_packets'] = $buffer_size_in_packets;

        return $this;
    }

    /**
     * Gets clip_length
     * @return string
     */
    public function getClipLength()
    {
        return $this->container['clip_length'];
    }

    /**
     * Sets clip_length
     * @param string $clip_length Sets the clip’s duration.
     * @return $this
     */
    public function setClipLength($clip_length)
    {
        $this->container['clip_length'] = $clip_length;

        return $this;
    }

    /**
     * Gets clip_offset
     * @return string
     */
    public function getClipOffset()
    {
        return $this->container['clip_offset'];
    }

    /**
     * Sets clip_offset
     * @param string $clip_offset Clip starts at a specific offset.
     * @return $this
     */
    public function setClipOffset($clip_offset)
    {
        $this->container['clip_offset'] = $clip_offset;

        return $this;
    }

    /**
     * Gets closed_captions
     * @return string
     */
    public function getClosedCaptions()
    {
        return $this->container['closed_captions'];
    }

    /**
     * Sets closed_captions
     * @param string $closed_captions One of add (adds captions as a separate streams) or burn (burns captions on video stream using the first subtitle file). By default it is not set.
     * @return $this
     */
    public function setClosedCaptions($closed_captions)
    {
        $allowed_values = $this->getClosedCaptionsAllowableValues();
        if (!is_null($closed_captions) && !in_array($closed_captions, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'closed_captions', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['closed_captions'] = $closed_captions;

        return $this;
    }

    /**
     * Gets dash_profile
     * @return string
     */
    public function getDashProfile()
    {
        return $this->container['dash_profile'];
    }

    /**
     * Sets dash_profile
     * @param string $dash_profile
     * @return $this
     */
    public function setDashProfile($dash_profile)
    {
        $this->container['dash_profile'] = $dash_profile;

        return $this;
    }

    /**
     * Gets deinterlace
     * @return string
     */
    public function getDeinterlace()
    {
        return $this->container['deinterlace'];
    }

    /**
     * Sets deinterlace
     * @param string $deinterlace One of `keep_fps` or `double_fps`. By default it is not set.
     * @return $this
     */
    public function setDeinterlace($deinterlace)
    {
        $allowed_values = $this->getDeinterlaceAllowableValues();
        if (!is_null($deinterlace) && !in_array($deinterlace, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deinterlace', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['deinterlace'] = $deinterlace;

        return $this;
    }

    /**
     * Gets deinterlace_frames
     * @return string
     */
    public function getDeinterlaceFrames()
    {
        return $this->container['deinterlace_frames'];
    }

    /**
     * Sets deinterlace_frames
     * @param string $deinterlace_frames
     * @return $this
     */
    public function setDeinterlaceFrames($deinterlace_frames)
    {
        $this->container['deinterlace_frames'] = $deinterlace_frames;

        return $this;
    }

    /**
     * Gets dnxhd_type
     * @return string
     */
    public function getDnxhdType()
    {
        return $this->container['dnxhd_type'];
    }

    /**
     * Sets dnxhd_type
     * @param string $dnxhd_type
     * @return $this
     */
    public function setDnxhdType($dnxhd_type)
    {
        $this->container['dnxhd_type'] = $dnxhd_type;

        return $this;
    }

    /**
     * Gets encryption
     * @return bool
     */
    public function getEncryption()
    {
        return $this->container['encryption'];
    }

    /**
     * Sets encryption
     * @param bool $encryption
     * @return $this
     */
    public function setEncryption($encryption)
    {
        $this->container['encryption'] = $encryption;

        return $this;
    }

    /**
     * Gets extname
     * @return string
     */
    public function getExtname()
    {
        return $this->container['extname'];
    }

    /**
     * Sets extname
     * @param string $extname File extension.
     * @return $this
     */
    public function setExtname($extname)
    {
        $this->container['extname'] = $extname;

        return $this;
    }

    /**
     * Gets fps
     * @return float
     */
    public function getFps()
    {
        return $this->container['fps'];
    }

    /**
     * Sets fps
     * @param float $fps Null value copy the original fps. By default it is not set.
     * @return $this
     */
    public function setFps($fps)
    {
        $this->container['fps'] = $fps;

        return $this;
    }

    /**
     * Gets frame_offsets
     * @return string
     */
    public function getFrameOffsets()
    {
        return $this->container['frame_offsets'];
    }

    /**
     * Sets frame_offsets
     * @param string $frame_offsets Array of offsets (Frames or seconds).
     * @return $this
     */
    public function setFrameOffsets($frame_offsets)
    {
        $this->container['frame_offsets'] = $frame_offsets;

        return $this;
    }

    /**
     * Gets frame_interval
     * @return string
     */
    public function getFrameInterval()
    {
        return $this->container['frame_interval'];
    }

    /**
     * Sets frame_interval
     * @param string $frame_interval Thumbnail interval (Frames or seconds).
     * @return $this
     */
    public function setFrameInterval($frame_interval)
    {
        $this->container['frame_interval'] = $frame_interval;

        return $this;
    }

    /**
     * Gets frame_count
     * @return int
     */
    public function getFrameCount()
    {
        return $this->container['frame_count'];
    }

    /**
     * Sets frame_count
     * @param int $frame_count Evenly spaced number of generated screenshots. By default it is not set.
     * @return $this
     */
    public function setFrameCount($frame_count)
    {
        $this->container['frame_count'] = $frame_count;

        return $this;
    }

    /**
     * Gets h264_level
     * @return string
     */
    public function getH264Level()
    {
        return $this->container['h264_level'];
    }

    /**
     * Sets h264_level
     * @param string $h264_level A specified set of constraints that indicate a degree of required decoder performance for a profile.
     * @return $this
     */
    public function setH264Level($h264_level)
    {
        $allowed_values = $this->getH264LevelAllowableValues();
        if (!is_null($h264_level) && !in_array($h264_level, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'h264_level', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['h264_level'] = $h264_level;

        return $this;
    }

    /**
     * Gets h264_profile
     * @return string
     */
    public function getH264Profile()
    {
        return $this->container['h264_profile'];
    }

    /**
     * Sets h264_profile
     * @param string $h264_profile Profiles represent a sub-set of the encoding techniques available in H.264.
     * @return $this
     */
    public function setH264Profile($h264_profile)
    {
        $allowed_values = $this->getH264ProfileAllowableValues();
        if (!is_null($h264_profile) && !in_array($h264_profile, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'h264_profile', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['h264_profile'] = $h264_profile;

        return $this;
    }

    /**
     * Gets h264_tune
     * @return string
     */
    public function getH264Tune()
    {
        return $this->container['h264_tune'];
    }

    /**
     * Sets h264_tune
     * @param string $h264_tune Use this option to change settings based upon the specifics of your input
     * @return $this
     */
    public function setH264Tune($h264_tune)
    {
        $allowed_values = $this->getH264TuneAllowableValues();
        if (!is_null($h264_tune) && !in_array($h264_tune, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'h264_tune', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['h264_tune'] = $h264_tune;

        return $this;
    }

    /**
     * Gets height
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param int $height Height in pixels.
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets imx_type
     * @return string
     */
    public function getImxType()
    {
        return $this->container['imx_type'];
    }

    /**
     * Sets imx_type
     * @param string $imx_type
     * @return $this
     */
    public function setImxType($imx_type)
    {
        $this->container['imx_type'] = $imx_type;

        return $this;
    }

    /**
     * Gets interlace
     * @return string
     */
    public function getInterlace()
    {
        return $this->container['interlace'];
    }

    /**
     * Sets interlace
     * @param string $interlace
     * @return $this
     */
    public function setInterlace($interlace)
    {
        $this->container['interlace'] = $interlace;

        return $this;
    }

    /**
     * Gets keyframe_interval
     * @return int
     */
    public function getKeyframeInterval()
    {
        return $this->container['keyframe_interval'];
    }

    /**
     * Sets keyframe_interval
     * @param int $keyframe_interval Adds a key frame every N frames. Default is 250, adds a key frame every 250 frames.
     * @return $this
     */
    public function setKeyframeInterval($keyframe_interval)
    {
        $this->container['keyframe_interval'] = $keyframe_interval;

        return $this;
    }

    /**
     * Gets keyframe_rate
     * @return float
     */
    public function getKeyframeRate()
    {
        return $this->container['keyframe_rate'];
    }

    /**
     * Sets keyframe_rate
     * @param float $keyframe_rate todo
     * @return $this
     */
    public function setKeyframeRate($keyframe_rate)
    {
        $this->container['keyframe_rate'] = $keyframe_rate;

        return $this;
    }

    /**
     * Gets max_rate
     * @return int
     */
    public function getMaxRate()
    {
        return $this->container['max_rate'];
    }

    /**
     * Sets max_rate
     * @param int $max_rate Set max bitrate tolerance (in bits/s). By default this is not set
     * @return $this
     */
    public function setMaxRate($max_rate)
    {
        $this->container['max_rate'] = $max_rate;

        return $this;
    }

    /**
     * Gets merge_audio_streams
     * @return string
     */
    public function getMergeAudioStreams()
    {
        return $this->container['merge_audio_streams'];
    }

    /**
     * Sets merge_audio_streams
     * @param string $merge_audio_streams
     * @return $this
     */
    public function setMergeAudioStreams($merge_audio_streams)
    {
        $this->container['merge_audio_streams'] = $merge_audio_streams;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Unique machine-readable name that will identify the profile. Helpful later on for filtering encodings by profile.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets outputs_path_format
     * @return string
     */
    public function getOutputsPathFormat()
    {
        return $this->container['outputs_path_format'];
    }

    /**
     * Sets outputs_path_format
     * @param string $outputs_path_format Specify the directory where the output files should be stored. By default it is not set. More information about this [here](https://cloud.telestream.net/docs#path-format---know-how).
     * @return $this
     */
    public function setOutputsPathFormat($outputs_path_format)
    {
        $this->container['outputs_path_format'] = $outputs_path_format;

        return $this;
    }

    /**
     * Gets pmt_pid
     * @return string
     */
    public function getPmtPid()
    {
        return $this->container['pmt_pid'];
    }

    /**
     * Sets pmt_pid
     * @param string $pmt_pid
     * @return $this
     */
    public function setPmtPid($pmt_pid)
    {
        $this->container['pmt_pid'] = $pmt_pid;

        return $this;
    }

    /**
     * Gets prores_format
     * @return string
     */
    public function getProresFormat()
    {
        return $this->container['prores_format'];
    }

    /**
     * Sets prores_format
     * @param string $prores_format
     * @return $this
     */
    public function setProresFormat($prores_format)
    {
        $this->container['prores_format'] = $prores_format;

        return $this;
    }

    /**
     * Gets segment_time
     * @return string
     */
    public function getSegmentTime()
    {
        return $this->container['segment_time'];
    }

    /**
     * Sets segment_time
     * @param string $segment_time
     * @return $this
     */
    public function setSegmentTime($segment_time)
    {
        $this->container['segment_time'] = $segment_time;

        return $this;
    }

    /**
     * Gets size
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     * @param string $size
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets tar
     * @return bool
     */
    public function getTar()
    {
        return $this->container['tar'];
    }

    /**
     * Sets tar
     * @param bool $tar
     * @return $this
     */
    public function setTar($tar)
    {
        $this->container['tar'] = $tar;

        return $this;
    }

    /**
     * Gets transport_rate
     * @return string
     */
    public function getTransportRate()
    {
        return $this->container['transport_rate'];
    }

    /**
     * Sets transport_rate
     * @param string $transport_rate
     * @return $this
     */
    public function setTransportRate($transport_rate)
    {
        $this->container['transport_rate'] = $transport_rate;

        return $this;
    }

    /**
     * Gets ts_pids
     * @return string
     */
    public function getTsPids()
    {
        return $this->container['ts_pids'];
    }

    /**
     * Sets ts_pids
     * @param string $ts_pids
     * @return $this
     */
    public function setTsPids($ts_pids)
    {
        $this->container['ts_pids'] = $ts_pids;

        return $this;
    }

    /**
     * Gets upscale
     * @return bool
     */
    public function getUpscale()
    {
        return $this->container['upscale'];
    }

    /**
     * Sets upscale
     * @param bool $upscale Upscale the video resolution to match your profile. Default is `true`.
     * @return $this
     */
    public function setUpscale($upscale)
    {
        $this->container['upscale'] = $upscale;

        return $this;
    }

    /**
     * Gets variants
     * @return string
     */
    public function getVariants()
    {
        return $this->container['variants'];
    }

    /**
     * Sets variants
     * @param string $variants Pattern utilised to match HLS.Variant presets by name. Default is hls.*.
     * @return $this
     */
    public function setVariants($variants)
    {
        $this->container['variants'] = $variants;

        return $this;
    }

    /**
     * Gets video_bitrate
     * @return int
     */
    public function getVideoBitrate()
    {
        return $this->container['video_bitrate'];
    }

    /**
     * Sets video_bitrate
     * @param int $video_bitrate
     * @return $this
     */
    public function setVideoBitrate($video_bitrate)
    {
        $this->container['video_bitrate'] = $video_bitrate;

        return $this;
    }

    /**
     * Gets video_pid
     * @return string
     */
    public function getVideoPid()
    {
        return $this->container['video_pid'];
    }

    /**
     * Sets video_pid
     * @param string $video_pid
     * @return $this
     */
    public function setVideoPid($video_pid)
    {
        $this->container['video_pid'] = $video_pid;

        return $this;
    }

    /**
     * Gets watermark_bottom
     * @return string
     */
    public function getWatermarkBottom()
    {
        return $this->container['watermark_bottom'];
    }

    /**
     * Sets watermark_bottom
     * @param string $watermark_bottom Distance from the bottom of the video frame in pixels or percentage of video frame height. Works like CSS. Default is `0`.
     * @return $this
     */
    public function setWatermarkBottom($watermark_bottom)
    {
        $this->container['watermark_bottom'] = $watermark_bottom;

        return $this;
    }

    /**
     * Gets watermark_height
     * @return string
     */
    public function getWatermarkHeight()
    {
        return $this->container['watermark_height'];
    }

    /**
     * Sets watermark_height
     * @param string $watermark_height Height of the watermark image in pixels or percentage of video frame height. Default is no resizing
     * @return $this
     */
    public function setWatermarkHeight($watermark_height)
    {
        $this->container['watermark_height'] = $watermark_height;

        return $this;
    }

    /**
     * Gets watermark_left
     * @return string
     */
    public function getWatermarkLeft()
    {
        return $this->container['watermark_left'];
    }

    /**
     * Sets watermark_left
     * @param string $watermark_left Distance from the left of the video frame in pixels or percentage of video frame width. Works like CSS. Default is `0`.
     * @return $this
     */
    public function setWatermarkLeft($watermark_left)
    {
        $this->container['watermark_left'] = $watermark_left;

        return $this;
    }

    /**
     * Gets watermark_right
     * @return string
     */
    public function getWatermarkRight()
    {
        return $this->container['watermark_right'];
    }

    /**
     * Sets watermark_right
     * @param string $watermark_right Distance from the right of the video frame in pixels or percentage of video frame width. Works like CSS. Default is `0`.
     * @return $this
     */
    public function setWatermarkRight($watermark_right)
    {
        $this->container['watermark_right'] = $watermark_right;

        return $this;
    }

    /**
     * Gets watermark_top
     * @return string
     */
    public function getWatermarkTop()
    {
        return $this->container['watermark_top'];
    }

    /**
     * Sets watermark_top
     * @param string $watermark_top Distance from the top of the video frame in pixels or percentage of video frame height. Works like CSS. Default is `0`.
     * @return $this
     */
    public function setWatermarkTop($watermark_top)
    {
        $this->container['watermark_top'] = $watermark_top;

        return $this;
    }

    /**
     * Gets watermark_url
     * @return string
     */
    public function getWatermarkUrl()
    {
        return $this->container['watermark_url'];
    }

    /**
     * Sets watermark_url
     * @param string $watermark_url Url of a watermark image.
     * @return $this
     */
    public function setWatermarkUrl($watermark_url)
    {
        $this->container['watermark_url'] = $watermark_url;

        return $this;
    }

    /**
     * Gets watermark_width
     * @return string
     */
    public function getWatermarkWidth()
    {
        return $this->container['watermark_width'];
    }

    /**
     * Sets watermark_width
     * @param string $watermark_width Width of the watermark image in pixels or percentage of video frame width. Default is `no resizing`.
     * @return $this
     */
    public function setWatermarkWidth($watermark_width)
    {
        $this->container['watermark_width'] = $watermark_width;

        return $this;
    }

    /**
     * Gets width
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     * @param int $width Width in pixels.
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets x264_options
     * @return string
     */
    public function getX264Options()
    {
        return $this->container['x264_options'];
    }

    /**
     * Sets x264_options
     * @param string $x264_options
     * @return $this
     */
    public function setX264Options($x264_options)
    {
        $this->container['x264_options'] = $x264_options;

        return $this;
    }

    /**
     * Gets x265_options
     * @return string
     */
    public function getX265Options()
    {
        return $this->container['x265_options'];
    }

    /**
     * Sets x265_options
     * @param string $x265_options
     * @return $this
     */
    public function setX265Options($x265_options)
    {
        $this->container['x265_options'] = $x265_options;

        return $this;
    }

    /**
     * Gets xdcam_format
     * @return string
     */
    public function getXdcamFormat()
    {
        return $this->container['xdcam_format'];
    }

    /**
     * Sets xdcam_format
     * @param string $xdcam_format
     * @return $this
     */
    public function setXdcamFormat($xdcam_format)
    {
        $this->container['xdcam_format'] = $xdcam_format;

        return $this;
    }

    /**
     * Gets mute_audio_tracks
     * @return bool
     */
    public function getMuteAudioTracks()
    {
        return $this->container['mute_audio_tracks'];
    }

    /**
     * Sets mute_audio_tracks
     * @param bool $mute_audio_tracks Remove audio from input video file. By default it is set to `false`.
     * @return $this
     */
    public function setMuteAudioTracks($mute_audio_tracks)
    {
        $this->container['mute_audio_tracks'] = $mute_audio_tracks;

        return $this;
    }

    /**
     * Gets byte_range_requests
     * @return string
     */
    public function getByteRangeRequests()
    {
        return $this->container['byte_range_requests'];
    }

    /**
     * Sets byte_range_requests
     * @param string $byte_range_requests
     * @return $this
     */
    public function setByteRangeRequests($byte_range_requests)
    {
        $this->container['byte_range_requests'] = $byte_range_requests;

        return $this;
    }

    /**
     * Gets lang
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     * @param string $lang
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets use_editlist
     * @return string
     */
    public function getUseEditlist()
    {
        return $this->container['use_editlist'];
    }

    /**
     * Sets use_editlist
     * @param string $use_editlist
     * @return $this
     */
    public function setUseEditlist($use_editlist)
    {
        $this->container['use_editlist'] = $use_editlist;

        return $this;
    }

    /**
     * Gets audio_map
     * @return string
     */
    public function getAudioMap()
    {
        return $this->container['audio_map'];
    }

    /**
     * Sets audio_map
     * @param string $audio_map
     * @return $this
     */
    public function setAudioMap($audio_map)
    {
        $this->container['audio_map'] = $audio_map;

        return $this;
    }

    /**
     * Gets audio_stream_id
     * @return string
     */
    public function getAudioStreamId()
    {
        return $this->container['audio_stream_id'];
    }

    /**
     * Sets audio_stream_id
     * @param string $audio_stream_id
     * @return $this
     */
    public function setAudioStreamId($audio_stream_id)
    {
        $this->container['audio_stream_id'] = $audio_stream_id;

        return $this;
    }

    /**
     * Gets bumpers
     * @return string
     */
    public function getBumpers()
    {
        return $this->container['bumpers'];
    }

    /**
     * Sets bumpers
     * @param string $bumpers
     * @return $this
     */
    public function setBumpers($bumpers)
    {
        $this->container['bumpers'] = $bumpers;

        return $this;
    }

    /**
     * Gets codec_preset
     * @return string
     */
    public function getCodecPreset()
    {
        return $this->container['codec_preset'];
    }

    /**
     * Sets codec_preset
     * @param string $codec_preset Determines a preset that is used by encoders.
     * @return $this
     */
    public function setCodecPreset($codec_preset)
    {
        $allowed_values = $this->getCodecPresetAllowableValues();
        if (!is_null($codec_preset) && !in_array($codec_preset, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'codec_preset', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['codec_preset'] = $codec_preset;

        return $this;
    }

    /**
     * Gets color_metadata
     * @return string
     */
    public function getColorMetadata()
    {
        return $this->container['color_metadata'];
    }

    /**
     * Sets color_metadata
     * @param string $color_metadata
     * @return $this
     */
    public function setColorMetadata($color_metadata)
    {
        $this->container['color_metadata'] = $color_metadata;

        return $this;
    }

    /**
     * Gets crop_input_bottom
     * @return string
     */
    public function getCropInputBottom()
    {
        return $this->container['crop_input_bottom'];
    }

    /**
     * Sets crop_input_bottom
     * @param string $crop_input_bottom Distance (in pixels) from the bottom edge of the screen from which you want your crop to be done.
     * @return $this
     */
    public function setCropInputBottom($crop_input_bottom)
    {
        $this->container['crop_input_bottom'] = $crop_input_bottom;

        return $this;
    }

    /**
     * Gets crop_input_height
     * @return string
     */
    public function getCropInputHeight()
    {
        return $this->container['crop_input_height'];
    }

    /**
     * Sets crop_input_height
     * @param string $crop_input_height Width of the cropped image in pixels.
     * @return $this
     */
    public function setCropInputHeight($crop_input_height)
    {
        $this->container['crop_input_height'] = $crop_input_height;

        return $this;
    }

    /**
     * Gets crop_input_left
     * @return string
     */
    public function getCropInputLeft()
    {
        return $this->container['crop_input_left'];
    }

    /**
     * Sets crop_input_left
     * @param string $crop_input_left Distance (in pixels) from the left edge of the screen from which you want your crop to be done.
     * @return $this
     */
    public function setCropInputLeft($crop_input_left)
    {
        $this->container['crop_input_left'] = $crop_input_left;

        return $this;
    }

    /**
     * Gets crop_input_right
     * @return string
     */
    public function getCropInputRight()
    {
        return $this->container['crop_input_right'];
    }

    /**
     * Sets crop_input_right
     * @param string $crop_input_right Distance (in pixels) from the right edge of the screen from which you want your crop to be done.
     * @return $this
     */
    public function setCropInputRight($crop_input_right)
    {
        $this->container['crop_input_right'] = $crop_input_right;

        return $this;
    }

    /**
     * Gets crop_input_top
     * @return string
     */
    public function getCropInputTop()
    {
        return $this->container['crop_input_top'];
    }

    /**
     * Sets crop_input_top
     * @param string $crop_input_top Distance (in pixels) from the top edge of the screen from which you want your crop to be done.
     * @return $this
     */
    public function setCropInputTop($crop_input_top)
    {
        $this->container['crop_input_top'] = $crop_input_top;

        return $this;
    }

    /**
     * Gets crop_input_width
     * @return string
     */
    public function getCropInputWidth()
    {
        return $this->container['crop_input_width'];
    }

    /**
     * Sets crop_input_width
     * @param string $crop_input_width Height of the cropped image in pixels.
     * @return $this
     */
    public function setCropInputWidth($crop_input_width)
    {
        $this->container['crop_input_width'] = $crop_input_width;

        return $this;
    }

    /**
     * Gets dynamic_recipe
     * @return string
     */
    public function getDynamicRecipe()
    {
        return $this->container['dynamic_recipe'];
    }

    /**
     * Sets dynamic_recipe
     * @param string $dynamic_recipe
     * @return $this
     */
    public function setDynamicRecipe($dynamic_recipe)
    {
        $this->container['dynamic_recipe'] = $dynamic_recipe;

        return $this;
    }

    /**
     * Gets playlist_type
     * @return string
     */
    public function getPlaylistType()
    {
        return $this->container['playlist_type'];
    }

    /**
     * Sets playlist_type
     * @param string $playlist_type
     * @return $this
     */
    public function setPlaylistType($playlist_type)
    {
        $this->container['playlist_type'] = $playlist_type;

        return $this;
    }

    /**
     * Gets preset_version
     * @return string
     */
    public function getPresetVersion()
    {
        return $this->container['preset_version'];
    }

    /**
     * Sets preset_version
     * @param string $preset_version
     * @return $this
     */
    public function setPresetVersion($preset_version)
    {
        $this->container['preset_version'] = $preset_version;

        return $this;
    }

    /**
     * Gets segment_delimiter
     * @return string
     */
    public function getSegmentDelimiter()
    {
        return $this->container['segment_delimiter'];
    }

    /**
     * Sets segment_delimiter
     * @param string $segment_delimiter
     * @return $this
     */
    public function setSegmentDelimiter($segment_delimiter)
    {
        $this->container['segment_delimiter'] = $segment_delimiter;

        return $this;
    }

    /**
     * Gets sws_flags
     * @return string
     */
    public function getSwsFlags()
    {
        return $this->container['sws_flags'];
    }

    /**
     * Sets sws_flags
     * @param string $sws_flags
     * @return $this
     */
    public function setSwsFlags($sws_flags)
    {
        $this->container['sws_flags'] = $sws_flags;

        return $this;
    }

    /**
     * Gets telestream_block_size
     * @return string
     */
    public function getTelestreamBlockSize()
    {
        return $this->container['telestream_block_size'];
    }

    /**
     * Sets telestream_block_size
     * @param string $telestream_block_size
     * @return $this
     */
    public function setTelestreamBlockSize($telestream_block_size)
    {
        $allowed_values = $this->getTelestreamBlockSizeAllowableValues();
        if (!is_null($telestream_block_size) && !in_array($telestream_block_size, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'telestream_block_size', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['telestream_block_size'] = $telestream_block_size;

        return $this;
    }

    /**
     * Gets telestream_blur_scaler
     * @return string
     */
    public function getTelestreamBlurScaler()
    {
        return $this->container['telestream_blur_scaler'];
    }

    /**
     * Sets telestream_blur_scaler
     * @param string $telestream_blur_scaler Minimum value is 0, maximum is 4.
     * @return $this
     */
    public function setTelestreamBlurScaler($telestream_blur_scaler)
    {
        $this->container['telestream_blur_scaler'] = $telestream_blur_scaler;

        return $this;
    }

    /**
     * Gets telestream_cost_scaler
     * @return string
     */
    public function getTelestreamCostScaler()
    {
        return $this->container['telestream_cost_scaler'];
    }

    /**
     * Sets telestream_cost_scaler
     * @param string $telestream_cost_scaler Minimum value is 0, maximum is 4.
     * @return $this
     */
    public function setTelestreamCostScaler($telestream_cost_scaler)
    {
        $this->container['telestream_cost_scaler'] = $telestream_cost_scaler;

        return $this;
    }

    /**
     * Gets telestream_search_length_scaler
     * @return string
     */
    public function getTelestreamSearchLengthScaler()
    {
        return $this->container['telestream_search_length_scaler'];
    }

    /**
     * Sets telestream_search_length_scaler
     * @param string $telestream_search_length_scaler Minimum value is 0, maximum is 2.
     * @return $this
     */
    public function setTelestreamSearchLengthScaler($telestream_search_length_scaler)
    {
        $this->container['telestream_search_length_scaler'] = $telestream_search_length_scaler;

        return $this;
    }

    /**
     * Gets telestream_subpel_mode
     * @return string
     */
    public function getTelestreamSubpelMode()
    {
        return $this->container['telestream_subpel_mode'];
    }

    /**
     * Sets telestream_subpel_mode
     * @param string $telestream_subpel_mode
     * @return $this
     */
    public function setTelestreamSubpelMode($telestream_subpel_mode)
    {
        $this->container['telestream_subpel_mode'] = $telestream_subpel_mode;

        return $this;
    }

    /**
     * Gets trailers
     * @return string
     */
    public function getTrailers()
    {
        return $this->container['trailers'];
    }

    /**
     * Sets trailers
     * @param string $trailers
     * @return $this
     */
    public function setTrailers($trailers)
    {
        $this->container['trailers'] = $trailers;

        return $this;
    }

    /**
     * Gets vantage_group_id
     * @return string
     */
    public function getVantageGroupId()
    {
        return $this->container['vantage_group_id'];
    }

    /**
     * Sets vantage_group_id
     * @param string $vantage_group_id
     * @return $this
     */
    public function setVantageGroupId($vantage_group_id)
    {
        $this->container['vantage_group_id'] = $vantage_group_id;

        return $this;
    }

    /**
     * Gets watermark_bumpers
     * @return string
     */
    public function getWatermarkBumpers()
    {
        return $this->container['watermark_bumpers'];
    }

    /**
     * Sets watermark_bumpers
     * @param string $watermark_bumpers
     * @return $this
     */
    public function setWatermarkBumpers($watermark_bumpers)
    {
        $this->container['watermark_bumpers'] = $watermark_bumpers;

        return $this;
    }

    /**
     * Gets watermark_trailers
     * @return string
     */
    public function getWatermarkTrailers()
    {
        return $this->container['watermark_trailers'];
    }

    /**
     * Sets watermark_trailers
     * @param string $watermark_trailers
     * @return $this
     */
    public function setWatermarkTrailers($watermark_trailers)
    {
        $this->container['watermark_trailers'] = $watermark_trailers;

        return $this;
    }

    /**
     * Gets workorder_criteria
     * @return object
     */
    public function getWorkorderCriteria()
    {
        return $this->container['workorder_criteria'];
    }

    /**
     * Sets workorder_criteria
     * @param object $workorder_criteria
     * @return $this
     */
    public function setWorkorderCriteria($workorder_criteria)
    {
        $this->container['workorder_criteria'] = $workorder_criteria;

        return $this;
    }

    /**
     * Gets tachyon_allow_remove_pulldown
     * @return bool
     */
    public function getTachyonAllowRemovePulldown()
    {
        return $this->container['tachyon_allow_remove_pulldown'];
    }

    /**
     * Sets tachyon_allow_remove_pulldown
     * @param bool $tachyon_allow_remove_pulldown Enable more sensitive pulldown removal algorithm.
     * @return $this
     */
    public function setTachyonAllowRemovePulldown($tachyon_allow_remove_pulldown)
    {
        $this->container['tachyon_allow_remove_pulldown'] = $tachyon_allow_remove_pulldown;

        return $this;
    }

    /**
     * Gets tachyon_enable_post_pulldown_filter
     * @return bool
     */
    public function getTachyonEnablePostPulldownFilter()
    {
        return $this->container['tachyon_enable_post_pulldown_filter'];
    }

    /**
     * Sets tachyon_enable_post_pulldown_filter
     * @param bool $tachyon_enable_post_pulldown_filter If the images you are converting are composited 29.976, but the pulldown pattern was not adhered to when performing the composite, this setting is required to remove combing artifacts. It will also remove combing artifacts related to very poor 3:2 cadence.
     * @return $this
     */
    public function setTachyonEnablePostPulldownFilter($tachyon_enable_post_pulldown_filter)
    {
        $this->container['tachyon_enable_post_pulldown_filter'] = $tachyon_enable_post_pulldown_filter;

        return $this;
    }

    /**
     * Gets tachyon_media_hint_is_cartoon
     * @return bool
     */
    public function getTachyonMediaHintIsCartoon()
    {
        return $this->container['tachyon_media_hint_is_cartoon'];
    }

    /**
     * Sets tachyon_media_hint_is_cartoon
     * @param bool $tachyon_media_hint_is_cartoon
     * @return $this
     */
    public function setTachyonMediaHintIsCartoon($tachyon_media_hint_is_cartoon)
    {
        $this->container['tachyon_media_hint_is_cartoon'] = $tachyon_media_hint_is_cartoon;

        return $this;
    }

    /**
     * Gets tachyon_media_hint_has_chroma_noise
     * @return bool
     */
    public function getTachyonMediaHintHasChromaNoise()
    {
        return $this->container['tachyon_media_hint_has_chroma_noise'];
    }

    /**
     * Sets tachyon_media_hint_has_chroma_noise
     * @param bool $tachyon_media_hint_has_chroma_noise Remove chroma noise during the analysis of a video.
     * @return $this
     */
    public function setTachyonMediaHintHasChromaNoise($tachyon_media_hint_has_chroma_noise)
    {
        $this->container['tachyon_media_hint_has_chroma_noise'] = $tachyon_media_hint_has_chroma_noise;

        return $this;
    }

    /**
     * Gets tachyon_more_sensitive_remove_pulldown
     * @return bool
     */
    public function getTachyonMoreSensitiveRemovePulldown()
    {
        return $this->container['tachyon_more_sensitive_remove_pulldown'];
    }

    /**
     * Sets tachyon_more_sensitive_remove_pulldown
     * @param bool $tachyon_more_sensitive_remove_pulldown When pulldown is not achieved due to extremely broken cadence, or other factors like highly mixed content or if chroma noise masks motion, the pulldown engine may fall back to de-interlacing rather than removing telecine. If that's a case, a more sensitive pulldown pattern can be used. This algorithm favors inverse telecine and with lower thresholds for triggering pulldown identification, will maximize the number of progressive frames created from the video.
     * @return $this
     */
    public function setTachyonMoreSensitiveRemovePulldown($tachyon_more_sensitive_remove_pulldown)
    {
        $this->container['tachyon_more_sensitive_remove_pulldown'] = $tachyon_more_sensitive_remove_pulldown;

        return $this;
    }

    /**
     * Gets tachyon_allow_add_standard_pd
     * @return bool
     */
    public function getTachyonAllowAddStandardPd()
    {
        return $this->container['tachyon_allow_add_standard_pd'];
    }

    /**
     * Sets tachyon_allow_add_standard_pd
     * @param bool $tachyon_allow_add_standard_pd
     * @return $this
     */
    public function setTachyonAllowAddStandardPd($tachyon_allow_add_standard_pd)
    {
        $this->container['tachyon_allow_add_standard_pd'] = $tachyon_allow_add_standard_pd;

        return $this;
    }

    /**
     * Gets tachyon_allow_add_2_2pd
     * @return bool
     */
    public function getTachyonAllowAdd22pd()
    {
        return $this->container['tachyon_allow_add_2_2pd'];
    }

    /**
     * Sets tachyon_allow_add_2_2pd
     * @param bool $tachyon_allow_add_2_2pd Allows 2:2 (PSF) Insertion. Creates a new series of frames which are based on duplicating the field an interlacing it into top/bottom field. Maintains a film-look.
     * @return $this
     */
    public function setTachyonAllowAdd22pd($tachyon_allow_add_2_2pd)
    {
        $this->container['tachyon_allow_add_2_2pd'] = $tachyon_allow_add_2_2pd;

        return $this;
    }

    /**
     * Gets tachyon_allow_add_4_4pd
     * @return bool
     */
    public function getTachyonAllowAdd44pd()
    {
        return $this->container['tachyon_allow_add_4_4pd'];
    }

    /**
     * Sets tachyon_allow_add_4_4pd
     * @param bool $tachyon_allow_add_4_4pd Allows 4:4 Insertion. Repeats each progressive frame twice on output (motion rate is halved). This setting is used when you want to convert to high progressive frame rates (i.e. 50p/59.94p/60p) but want to preserve film qualities (low motion rate, such as 24p).
     * @return $this
     */
    public function setTachyonAllowAdd44pd($tachyon_allow_add_4_4pd)
    {
        $this->container['tachyon_allow_add_4_4pd'] = $tachyon_allow_add_4_4pd;

        return $this;
    }

    /**
     * Gets tachyon_allow_add_4_6pd
     * @return bool
     */
    public function getTachyonAllowAdd46pd()
    {
        return $this->container['tachyon_allow_add_4_6pd'];
    }

    /**
     * Sets tachyon_allow_add_4_6pd
     * @param bool $tachyon_allow_add_4_6pd 2:3 Insertion. inserts a standard 2:3 telecine pattern to 23.976p video stream to achieve a 29.97i frame rate
     * @return $this
     */
    public function setTachyonAllowAdd46pd($tachyon_allow_add_4_6pd)
    {
        $this->container['tachyon_allow_add_4_6pd'] = $tachyon_allow_add_4_6pd;

        return $this;
    }

    /**
     * Gets tachyon_allow_add_euro_pd
     * @return bool
     */
    public function getTachyonAllowAddEuroPd()
    {
        return $this->container['tachyon_allow_add_euro_pd'];
    }

    /**
     * Sets tachyon_allow_add_euro_pd
     * @param bool $tachyon_allow_add_euro_pd Allows Euro Insertion. For field based interpolation rather than pixel-based. This is designed for interlaced or progressive integer frame rate conversions that are being converted to interlaced outputs. This method is valid for 24p to 50i conversions only.
     * @return $this
     */
    public function setTachyonAllowAddEuroPd($tachyon_allow_add_euro_pd)
    {
        $this->container['tachyon_allow_add_euro_pd'] = $tachyon_allow_add_euro_pd;

        return $this;
    }

    /**
     * Gets tachyon_allow_add_adaptive_pd
     * @return bool
     */
    public function getTachyonAllowAddAdaptivePd()
    {
        return $this->container['tachyon_allow_add_adaptive_pd'];
    }

    /**
     * Sets tachyon_allow_add_adaptive_pd
     * @param bool $tachyon_allow_add_adaptive_pd Allows Adaptive Insertion. For field-based interpolation rather than using pixel-based interpolation. This algorithm is designed for both integer and non-integer frame rate conversion targets - as long as one of them is a non-integer rate (23.976, 29.97, 59.94, etc). This creates NTSC-PAL conversions clean of motion artifacts at the expense of potential slight stutter. Stutter is most noticeable with material that has smooth and uniform motion.
     * @return $this
     */
    public function setTachyonAllowAddAdaptivePd($tachyon_allow_add_adaptive_pd)
    {
        $this->container['tachyon_allow_add_adaptive_pd'] = $tachyon_allow_add_adaptive_pd;

        return $this;
    }

    /**
     * Gets tachyon_motion_amount
     * @return string
     */
    public function getTachyonMotionAmount()
    {
        return $this->container['tachyon_motion_amount'];
    }

    /**
     * Sets tachyon_motion_amount
     * @param string $tachyon_motion_amount This setting determines how much Tachyon will trust motion vectors in the creation of new images
     * @return $this
     */
    public function setTachyonMotionAmount($tachyon_motion_amount)
    {
        $allowed_values = $this->getTachyonMotionAmountAllowableValues();
        if (!is_null($tachyon_motion_amount) && !in_array($tachyon_motion_amount, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tachyon_motion_amount', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['tachyon_motion_amount'] = $tachyon_motion_amount;

        return $this;
    }

    /**
     * Gets tachyon_fallback_size
     * @return string
     */
    public function getTachyonFallbackSize()
    {
        return $this->container['tachyon_fallback_size'];
    }

    /**
     * Sets tachyon_fallback_size
     * @param string $tachyon_fallback_size This option specifies the transition region size between fallback areas and motion compensated areas. A larger fallback size allows more blending (feathering) to occur between the regions.
     * @return $this
     */
    public function setTachyonFallbackSize($tachyon_fallback_size)
    {
        $allowed_values = $this->getTachyonFallbackSizeAllowableValues();
        if (!is_null($tachyon_fallback_size) && !in_array($tachyon_fallback_size, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tachyon_fallback_size', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['tachyon_fallback_size'] = $tachyon_fallback_size;

        return $this;
    }

    /**
     * Gets tachyon_mblock_size
     * @return string
     */
    public function getTachyonMblockSize()
    {
        return $this->container['tachyon_mblock_size'];
    }

    /**
     * Sets tachyon_mblock_size
     * @param string $tachyon_mblock_size This option specifies the size of a motion block.
     * @return $this
     */
    public function setTachyonMblockSize($tachyon_mblock_size)
    {
        $allowed_values = $this->getTachyonMblockSizeAllowableValues();
        if (!is_null($tachyon_mblock_size) && !in_array($tachyon_mblock_size, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tachyon_mblock_size', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['tachyon_mblock_size'] = $tachyon_mblock_size;

        return $this;
    }

    /**
     * Gets tachyon_cut_detection_sensitivity
     * @return float
     */
    public function getTachyonCutDetectionSensitivity()
    {
        return $this->container['tachyon_cut_detection_sensitivity'];
    }

    /**
     * Sets tachyon_cut_detection_sensitivity
     * @param float $tachyon_cut_detection_sensitivity
     * @return $this
     */
    public function setTachyonCutDetectionSensitivity($tachyon_cut_detection_sensitivity)
    {
        $this->container['tachyon_cut_detection_sensitivity'] = $tachyon_cut_detection_sensitivity;

        return $this;
    }

    /**
     * Gets eac3_evolution_enable
     * @return bool
     */
    public function getEac3EvolutionEnable()
    {
        return $this->container['eac3_evolution_enable'];
    }

    /**
     * Sets eac3_evolution_enable
     * @param bool $eac3_evolution_enable Enables the trusted metadata framework.
     * @return $this
     */
    public function setEac3EvolutionEnable($eac3_evolution_enable)
    {
        $this->container['eac3_evolution_enable'] = $eac3_evolution_enable;

        return $this;
    }

    /**
     * Gets eac3_bitstream_mode
     * @return string
     */
    public function getEac3BitstreamMode()
    {
        return $this->container['eac3_bitstream_mode'];
    }

    /**
     * Sets eac3_bitstream_mode
     * @param string $eac3_bitstream_mode Selects the type of audio service. **For 1/0 Voiceover will be used when Voiceover/Karaoke is selected. For 2/0 and above Karaoke will be used.
     * @return $this
     */
    public function setEac3BitstreamMode($eac3_bitstream_mode)
    {
        $allowed_values = $this->getEac3BitstreamModeAllowableValues();
        if (!is_null($eac3_bitstream_mode) && !in_array($eac3_bitstream_mode, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eac3_bitstream_mode', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['eac3_bitstream_mode'] = $eac3_bitstream_mode;

        return $this;
    }

    /**
     * Gets eac3_ninety_degree_phase_shift
     * @return bool
     */
    public function getEac3NinetyDegreePhaseShift()
    {
        return $this->container['eac3_ninety_degree_phase_shift'];
    }

    /**
     * Sets eac3_ninety_degree_phase_shift
     * @param bool $eac3_ninety_degree_phase_shift Applies a 90-degree phase shift to the surround channels; necessary if the output file is being decoded by a Dolby Surround Pro Logic or Pro Logic II decoder.
     * @return $this
     */
    public function setEac3NinetyDegreePhaseShift($eac3_ninety_degree_phase_shift)
    {
        $this->container['eac3_ninety_degree_phase_shift'] = $eac3_ninety_degree_phase_shift;

        return $this;
    }

    /**
     * Gets eac3_three_decibel_attenuation
     * @return bool
     */
    public function getEac3ThreeDecibelAttenuation()
    {
        return $this->container['eac3_three_decibel_attenuation'];
    }

    /**
     * Sets eac3_three_decibel_attenuation
     * @param bool $eac3_three_decibel_attenuation Attenuates the surround channels by 3 dB before encoding.
     * @return $this
     */
    public function setEac3ThreeDecibelAttenuation($eac3_three_decibel_attenuation)
    {
        $this->container['eac3_three_decibel_attenuation'] = $eac3_three_decibel_attenuation;

        return $this;
    }

    /**
     * Gets eac3_enable_lfe_low_pass_filter
     * @return bool
     */
    public function getEac3EnableLfeLowPassFilter()
    {
        return $this->container['eac3_enable_lfe_low_pass_filter'];
    }

    /**
     * Sets eac3_enable_lfe_low_pass_filter
     * @param bool $eac3_enable_lfe_low_pass_filter Applies a 120 Hz eighth order lowpass filter to the LFE input prior to encoding.
     * @return $this
     */
    public function setEac3EnableLfeLowPassFilter($eac3_enable_lfe_low_pass_filter)
    {
        $this->container['eac3_enable_lfe_low_pass_filter'] = $eac3_enable_lfe_low_pass_filter;

        return $this;
    }

    /**
     * Gets eac3_analog_to_digital_converter_type
     * @return string
     */
    public function getEac3AnalogToDigitalConverterType()
    {
        return $this->container['eac3_analog_to_digital_converter_type'];
    }

    /**
     * Sets eac3_analog_to_digital_converter_type
     * @param string $eac3_analog_to_digital_converter_type Allows audio that has passed through an A/D conversion stage to be marked as such.
     * @return $this
     */
    public function setEac3AnalogToDigitalConverterType($eac3_analog_to_digital_converter_type)
    {
        $this->container['eac3_analog_to_digital_converter_type'] = $eac3_analog_to_digital_converter_type;

        return $this;
    }

    /**
     * Gets eac3_stereo_downmix_preference
     * @return string
     */
    public function getEac3StereoDownmixPreference()
    {
        return $this->container['eac3_stereo_downmix_preference'];
    }

    /**
     * Sets eac3_stereo_downmix_preference
     * @param string $eac3_stereo_downmix_preference
     * @return $this
     */
    public function setEac3StereoDownmixPreference($eac3_stereo_downmix_preference)
    {
        $allowed_values = $this->getEac3StereoDownmixPreferenceAllowableValues();
        if (!is_null($eac3_stereo_downmix_preference) && !in_array($eac3_stereo_downmix_preference, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eac3_stereo_downmix_preference', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['eac3_stereo_downmix_preference'] = $eac3_stereo_downmix_preference;

        return $this;
    }

    /**
     * Gets eac3_lt_rt_center_mix_level
     * @return string
     */
    public function getEac3LtRtCenterMixLevel()
    {
        return $this->container['eac3_lt_rt_center_mix_level'];
    }

    /**
     * Sets eac3_lt_rt_center_mix_level
     * @param string $eac3_lt_rt_center_mix_level Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lt/Rt output.
     * @return $this
     */
    public function setEac3LtRtCenterMixLevel($eac3_lt_rt_center_mix_level)
    {
        $allowed_values = $this->getEac3LtRtCenterMixLevelAllowableValues();
        if (!is_null($eac3_lt_rt_center_mix_level) && !in_array($eac3_lt_rt_center_mix_level, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eac3_lt_rt_center_mix_level', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['eac3_lt_rt_center_mix_level'] = $eac3_lt_rt_center_mix_level;

        return $this;
    }

    /**
     * Gets eac3_lt_rt_surround_mix_level
     * @return string
     */
    public function getEac3LtRtSurroundMixLevel()
    {
        return $this->container['eac3_lt_rt_surround_mix_level'];
    }

    /**
     * Sets eac3_lt_rt_surround_mix_level
     * @param string $eac3_lt_rt_surround_mix_level Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lt/Rt output.
     * @return $this
     */
    public function setEac3LtRtSurroundMixLevel($eac3_lt_rt_surround_mix_level)
    {
        $allowed_values = $this->getEac3LtRtSurroundMixLevelAllowableValues();
        if (!is_null($eac3_lt_rt_surround_mix_level) && !in_array($eac3_lt_rt_surround_mix_level, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eac3_lt_rt_surround_mix_level', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['eac3_lt_rt_surround_mix_level'] = $eac3_lt_rt_surround_mix_level;

        return $this;
    }

    /**
     * Gets eac3_lo_ro_center_mix_level
     * @return string
     */
    public function getEac3LoRoCenterMixLevel()
    {
        return $this->container['eac3_lo_ro_center_mix_level'];
    }

    /**
     * Sets eac3_lo_ro_center_mix_level
     * @param string $eac3_lo_ro_center_mix_level Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lo/Ro output.
     * @return $this
     */
    public function setEac3LoRoCenterMixLevel($eac3_lo_ro_center_mix_level)
    {
        $allowed_values = $this->getEac3LoRoCenterMixLevelAllowableValues();
        if (!is_null($eac3_lo_ro_center_mix_level) && !in_array($eac3_lo_ro_center_mix_level, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eac3_lo_ro_center_mix_level', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['eac3_lo_ro_center_mix_level'] = $eac3_lo_ro_center_mix_level;

        return $this;
    }

    /**
     * Gets eac3_lo_ro_surround_mix_level
     * @return string
     */
    public function getEac3LoRoSurroundMixLevel()
    {
        return $this->container['eac3_lo_ro_surround_mix_level'];
    }

    /**
     * Sets eac3_lo_ro_surround_mix_level
     * @param string $eac3_lo_ro_surround_mix_level Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lo/Ro output.
     * @return $this
     */
    public function setEac3LoRoSurroundMixLevel($eac3_lo_ro_surround_mix_level)
    {
        $allowed_values = $this->getEac3LoRoSurroundMixLevelAllowableValues();
        if (!is_null($eac3_lo_ro_surround_mix_level) && !in_array($eac3_lo_ro_surround_mix_level, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eac3_lo_ro_surround_mix_level', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['eac3_lo_ro_surround_mix_level'] = $eac3_lo_ro_surround_mix_level;

        return $this;
    }

    /**
     * Gets eac3_surround_ex_mode
     * @return string
     */
    public function getEac3SurroundExMode()
    {
        return $this->container['eac3_surround_ex_mode'];
    }

    /**
     * Sets eac3_surround_ex_mode
     * @param string $eac3_surround_ex_mode Indicates whether the audio stream was encoded using Dolby EX.
     * @return $this
     */
    public function setEac3SurroundExMode($eac3_surround_ex_mode)
    {
        $allowed_values = $this->getEac3SurroundExModeAllowableValues();
        if (!is_null($eac3_surround_ex_mode) && !in_array($eac3_surround_ex_mode, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eac3_surround_ex_mode', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['eac3_surround_ex_mode'] = $eac3_surround_ex_mode;

        return $this;
    }

    /**
     * Gets eac3_drc_line_mode_profile
     * @return string
     */
    public function getEac3DrcLineModeProfile()
    {
        return $this->container['eac3_drc_line_mode_profile'];
    }

    /**
     * Sets eac3_drc_line_mode_profile
     * @param string $eac3_drc_line_mode_profile Dynamic Range Control for Line Mode.
     * @return $this
     */
    public function setEac3DrcLineModeProfile($eac3_drc_line_mode_profile)
    {
        $allowed_values = $this->getEac3DrcLineModeProfileAllowableValues();
        if (!is_null($eac3_drc_line_mode_profile) && !in_array($eac3_drc_line_mode_profile, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eac3_drc_line_mode_profile', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['eac3_drc_line_mode_profile'] = $eac3_drc_line_mode_profile;

        return $this;
    }

    /**
     * Gets eac3_drc_rf_mode_profile
     * @return string
     */
    public function getEac3DrcRfModeProfile()
    {
        return $this->container['eac3_drc_rf_mode_profile'];
    }

    /**
     * Sets eac3_drc_rf_mode_profile
     * @param string $eac3_drc_rf_mode_profile Dynamic Range Control for RF Mode.
     * @return $this
     */
    public function setEac3DrcRfModeProfile($eac3_drc_rf_mode_profile)
    {
        $allowed_values = $this->getEac3DrcRfModeProfileAllowableValues();
        if (!is_null($eac3_drc_rf_mode_profile) && !in_array($eac3_drc_rf_mode_profile, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eac3_drc_rf_mode_profile', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['eac3_drc_rf_mode_profile'] = $eac3_drc_rf_mode_profile;

        return $this;
    }

    /**
     * Gets eac3_dialog_normalization
     * @return int
     */
    public function getEac3DialogNormalization()
    {
        return $this->container['eac3_dialog_normalization'];
    }

    /**
     * Sets eac3_dialog_normalization
     * @param int $eac3_dialog_normalization Represents the volume level of dialog in the audio stream which can be used by a Dolby Digital decoder. This aids the decoder in matching volume between program sources. Minimum value is 1, maximum is 31.
     * @return $this
     */
    public function setEac3DialogNormalization($eac3_dialog_normalization)
    {
        $this->container['eac3_dialog_normalization'] = $eac3_dialog_normalization;

        return $this;
    }

    /**
     * Gets eac3_room_type
     * @return string
     */
    public function getEac3RoomType()
    {
        return $this->container['eac3_room_type'];
    }

    /**
     * Sets eac3_room_type
     * @param string $eac3_room_type
     * @return $this
     */
    public function setEac3RoomType($eac3_room_type)
    {
        $allowed_values = $this->getEac3RoomTypeAllowableValues();
        if (!is_null($eac3_room_type) && !in_array($eac3_room_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eac3_room_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['eac3_room_type'] = $eac3_room_type;

        return $this;
    }

    /**
     * Gets eac3_mixing_level
     * @return int
     */
    public function getEac3MixingLevel()
    {
        return $this->container['eac3_mixing_level'];
    }

    /**
     * Sets eac3_mixing_level
     * @param int $eac3_mixing_level Minimum value is 80, maximum is 111.
     * @return $this
     */
    public function setEac3MixingLevel($eac3_mixing_level)
    {
        $this->container['eac3_mixing_level'] = $eac3_mixing_level;

        return $this;
    }

    /**
     * Gets eac3_copyright_protected
     * @return bool
     */
    public function getEac3CopyrightProtected()
    {
        return $this->container['eac3_copyright_protected'];
    }

    /**
     * Sets eac3_copyright_protected
     * @param bool $eac3_copyright_protected Indicates whether the encoded bitstream is copyright protected.
     * @return $this
     */
    public function setEac3CopyrightProtected($eac3_copyright_protected)
    {
        $this->container['eac3_copyright_protected'] = $eac3_copyright_protected;

        return $this;
    }

    /**
     * Gets eac3_original_bitstream
     * @return bool
     */
    public function getEac3OriginalBitstream()
    {
        return $this->container['eac3_original_bitstream'];
    }

    /**
     * Sets eac3_original_bitstream
     * @param bool $eac3_original_bitstream Indicates whether the encoded bitstream is the master version, or a copy.
     * @return $this
     */
    public function setEac3OriginalBitstream($eac3_original_bitstream)
    {
        $this->container['eac3_original_bitstream'] = $eac3_original_bitstream;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title Human-readable name.
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets time_code
     * @return bool
     */
    public function getTimeCode()
    {
        return $this->container['time_code'];
    }

    /**
     * Sets time_code
     * @param bool $time_code If set, timestamps will be added to your videos. By default this is not set.
     * @return $this
     */
    public function setTimeCode($time_code)
    {
        $this->container['time_code'] = $time_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TelestreamCloud\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TelestreamCloud\ObjectSerializer::sanitizeForSerialization($this));
    }
}


