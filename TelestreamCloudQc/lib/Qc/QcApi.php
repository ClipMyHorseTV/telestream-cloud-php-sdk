<?php
/**
 * QcApi
 * PHP version 5
 *
 * @category Class
 * @package  TelestreamCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qc API
 *
 * QC API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cloudsupport@telestream.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TelestreamCloud\Qc;

use \TelestreamCloud\ApiClient;
use \TelestreamCloud\ApiException;
use \TelestreamCloud\Configuration;
use \TelestreamCloud\ObjectSerializer;

/**
 * QcApi Class Doc Comment
 *
 * @category Class
 * @package  TelestreamCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QcApi
{
    /**
     * API Client
     *
     * @var \TelestreamCloud\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \TelestreamCloud\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\TelestreamCloud\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \TelestreamCloud\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \TelestreamCloud\ApiClient $apiClient set the API client
     *
     * @return QcApi
     */
    public function setApiClient(\TelestreamCloud\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation cancelJob
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param string $job A unique identifier of a Job. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return void
     */
    public function cancelJob($project, $job)
    {
        list($response) = $this->cancelJobWithHttpInfo($project, $job);
        return $response;
    }

    /**
     * Operation cancelJobWithHttpInfo
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param string $job A unique identifier of a Job. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelJobWithHttpInfo($project, $job)
    {
        // verify the required parameter 'project' is set
        if ($project === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project when calling cancelJob');
        }
        // verify the required parameter 'job' is set
        if ($job === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job when calling cancelJob');
        }
        // parse inputs
        $resourcePath = "/projects/{project}/jobs/{job}/cancel.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                "{" . "project" . "}",
                $this->apiClient->getSerializer()->toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($job !== null) {
            $resourcePath = str_replace(
                "{" . "job" . "}",
                $this->apiClient->getSerializer()->toPathValue($job),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/projects/{project}/jobs/{job}/cancel.json'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createJob
     *
     * Create a new job
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param \TelestreamCloud\Qc\JobData $data  (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Qc\Job
     */
    public function createJob($project, $data)
    {
        list($response) = $this->createJobWithHttpInfo($project, $data);
        return $response;
    }

    /**
     * Operation createJobWithHttpInfo
     *
     * Create a new job
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param \TelestreamCloud\Qc\JobData $data  (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Qc\Job, HTTP status code, HTTP response headers (array of strings)
     */
    public function createJobWithHttpInfo($project, $data)
    {
        // verify the required parameter 'project' is set
        if ($project === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project when calling createJob');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling createJob');
        }
        // parse inputs
        $resourcePath = "/projects/{project}/jobs.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                "{" . "project" . "}",
                $this->apiClient->getSerializer()->toPathValue($project),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Qc\Job',
                '/projects/{project}/jobs.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Qc\Job', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Qc\Job', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProject
     *
     * Create a new project
     *
     * @param \TelestreamCloud\Qc\Data $data  (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Qc\Project
     */
    public function createProject($data = null)
    {
        list($response) = $this->createProjectWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation createProjectWithHttpInfo
     *
     * Create a new project
     *
     * @param \TelestreamCloud\Qc\Data $data  (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Qc\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProjectWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/projects.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Qc\Project',
                '/projects.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Qc\Project', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Qc\Project', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJob
     *
     * Get QC job
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param string $job A unique identifier of a Job. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Qc\Job
     */
    public function getJob($project, $job)
    {
        list($response) = $this->getJobWithHttpInfo($project, $job);
        return $response;
    }

    /**
     * Operation getJobWithHttpInfo
     *
     * Get QC job
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param string $job A unique identifier of a Job. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Qc\Job, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobWithHttpInfo($project, $job)
    {
        // verify the required parameter 'project' is set
        if ($project === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project when calling getJob');
        }
        // verify the required parameter 'job' is set
        if ($job === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job when calling getJob');
        }
        // parse inputs
        $resourcePath = "/projects/{project}/jobs/{job}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                "{" . "project" . "}",
                $this->apiClient->getSerializer()->toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($job !== null) {
            $resourcePath = str_replace(
                "{" . "job" . "}",
                $this->apiClient->getSerializer()->toPathValue($job),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Qc\Job',
                '/projects/{project}/jobs/{job}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Qc\Job', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Qc\Job', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProject
     *
     * Get project by Id
     *
     * @param string $project A unique identifier of a Project. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Qc\Project
     */
    public function getProject($project)
    {
        list($response) = $this->getProjectWithHttpInfo($project);
        return $response;
    }

    /**
     * Operation getProjectWithHttpInfo
     *
     * Get project by Id
     *
     * @param string $project A unique identifier of a Project. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Qc\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectWithHttpInfo($project)
    {
        // verify the required parameter 'project' is set
        if ($project === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project when calling getProject');
        }
        // parse inputs
        $resourcePath = "/projects/{project}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                "{" . "project" . "}",
                $this->apiClient->getSerializer()->toPathValue($project),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Qc\Project',
                '/projects/{project}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Qc\Project', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Qc\Project', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listJobs
     *
     * Get jobs form projects
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param bool $expand Expand details of job (optional)
     * @param string $status Filter jobs by status (optional)
     * @param int $per_page Limit number of listed jobs (optional, default to 30)
     * @param int $page Index of jobs page to be listed (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Qc\JobsCollection
     */
    public function listJobs($project, $expand = null, $status = null, $per_page = '30', $page = null)
    {
        list($response) = $this->listJobsWithHttpInfo($project, $expand, $status, $per_page, $page);
        return $response;
    }

    /**
     * Operation listJobsWithHttpInfo
     *
     * Get jobs form projects
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param bool $expand Expand details of job (optional)
     * @param string $status Filter jobs by status (optional)
     * @param int $per_page Limit number of listed jobs (optional, default to 30)
     * @param int $page Index of jobs page to be listed (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Qc\JobsCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function listJobsWithHttpInfo($project, $expand = null, $status = null, $per_page = '30', $page = null)
    {
        // verify the required parameter 'project' is set
        if ($project === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project when calling listJobs');
        }
        // parse inputs
        $resourcePath = "/projects/{project}/jobs.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($expand !== null) {
            $queryParams['expand'] = $this->apiClient->getSerializer()->toQueryValue($expand);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                "{" . "project" . "}",
                $this->apiClient->getSerializer()->toPathValue($project),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Qc\JobsCollection',
                '/projects/{project}/jobs.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Qc\JobsCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Qc\JobsCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listProjects
     *
     * List all projects for an account
     *
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Qc\Project[]
     */
    public function listProjects()
    {
        list($response) = $this->listProjectsWithHttpInfo();
        return $response;
    }

    /**
     * Operation listProjectsWithHttpInfo
     *
     * List all projects for an account
     *
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Qc\Project[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listProjectsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/projects.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Qc\Project[]',
                '/projects.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Qc\Project[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Qc\Project[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modifyProject
     *
     * Modify project
     *
     * @param string $project  (required)
     * @param \TelestreamCloud\Qc\Data1 $data  (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Qc\Project
     */
    public function modifyProject($project, $data = null)
    {
        list($response) = $this->modifyProjectWithHttpInfo($project, $data);
        return $response;
    }

    /**
     * Operation modifyProjectWithHttpInfo
     *
     * Modify project
     *
     * @param string $project  (required)
     * @param \TelestreamCloud\Qc\Data1 $data  (optional)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Qc\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyProjectWithHttpInfo($project, $data = null)
    {
        // verify the required parameter 'project' is set
        if ($project === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project when calling modifyProject');
        }
        // parse inputs
        $resourcePath = "/projects/{project}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                "{" . "project" . "}",
                $this->apiClient->getSerializer()->toPathValue($project),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Qc\Project',
                '/projects/{project}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Qc\Project', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Qc\Project', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation proxy
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param string $job A unique identifier of a Job. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Qc\Proxy
     */
    public function proxy($project, $job)
    {
        list($response) = $this->proxyWithHttpInfo($project, $job);
        return $response;
    }

    /**
     * Operation proxyWithHttpInfo
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param string $job A unique identifier of a Job. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Qc\Proxy, HTTP status code, HTTP response headers (array of strings)
     */
    public function proxyWithHttpInfo($project, $job)
    {
        // verify the required parameter 'project' is set
        if ($project === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project when calling proxy');
        }
        // verify the required parameter 'job' is set
        if ($job === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job when calling proxy');
        }
        // parse inputs
        $resourcePath = "/projects/{project}/jobs/{job}/proxy.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                "{" . "project" . "}",
                $this->apiClient->getSerializer()->toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($job !== null) {
            $resourcePath = str_replace(
                "{" . "job" . "}",
                $this->apiClient->getSerializer()->toPathValue($job),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Qc\Proxy',
                '/projects/{project}/jobs/{job}/proxy.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Qc\Proxy', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Qc\Proxy', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeJob
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param string $job A unique identifier of a Job. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return void
     */
    public function removeJob($project, $job)
    {
        list($response) = $this->removeJobWithHttpInfo($project, $job);
        return $response;
    }

    /**
     * Operation removeJobWithHttpInfo
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param string $job A unique identifier of a Job. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeJobWithHttpInfo($project, $job)
    {
        // verify the required parameter 'project' is set
        if ($project === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project when calling removeJob');
        }
        // verify the required parameter 'job' is set
        if ($job === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job when calling removeJob');
        }
        // parse inputs
        $resourcePath = "/projects/{project}/jobs/{job}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                "{" . "project" . "}",
                $this->apiClient->getSerializer()->toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($job !== null) {
            $resourcePath = str_replace(
                "{" . "job" . "}",
                $this->apiClient->getSerializer()->toPathValue($job),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/projects/{project}/jobs/{job}.json'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeProject
     *
     * @param string $project  (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return void
     */
    public function removeProject($project)
    {
        list($response) = $this->removeProjectWithHttpInfo($project);
        return $response;
    }

    /**
     * Operation removeProjectWithHttpInfo
     *
     * @param string $project  (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeProjectWithHttpInfo($project)
    {
        // verify the required parameter 'project' is set
        if ($project === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project when calling removeProject');
        }
        // parse inputs
        $resourcePath = "/projects/{project}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                "{" . "project" . "}",
                $this->apiClient->getSerializer()->toPathValue($project),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/projects/{project}.json'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation signedUrls
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param string $job A unique identifier of a Job. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return map[string,string]
     */
    public function signedUrls($project, $job)
    {
        list($response) = $this->signedUrlsWithHttpInfo($project, $job);
        return $response;
    }

    /**
     * Operation signedUrlsWithHttpInfo
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param string $job A unique identifier of a Job. (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of map[string,string], HTTP status code, HTTP response headers (array of strings)
     */
    public function signedUrlsWithHttpInfo($project, $job)
    {
        // verify the required parameter 'project' is set
        if ($project === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project when calling signedUrls');
        }
        // verify the required parameter 'job' is set
        if ($job === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job when calling signedUrls');
        }
        // parse inputs
        $resourcePath = "/projects/{project}/jobs/{job}/signed-urls.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                "{" . "project" . "}",
                $this->apiClient->getSerializer()->toPathValue($project),
                $resourcePath
            );
        }
        // path params
        if ($job !== null) {
            $resourcePath = str_replace(
                "{" . "job" . "}",
                $this->apiClient->getSerializer()->toPathValue($job),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'map[string,string]',
                '/projects/{project}/jobs/{job}/signed-urls.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'map[string,string]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation uploadVideo
     *
     * Creates an upload session
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param \TelestreamCloud\Qc\VideoUploadBody $video_upload_body  (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return \TelestreamCloud\Qc\UploadSession
     */
    public function uploadVideo($project, $video_upload_body)
    {
        list($response) = $this->uploadVideoWithHttpInfo($project, $video_upload_body);
        return $response;
    }

    /**
     * Operation uploadVideoWithHttpInfo
     *
     * Creates an upload session
     *
     * @param string $project A unique identifier of a Project. (required)
     * @param \TelestreamCloud\Qc\VideoUploadBody $video_upload_body  (required)
     * @throws \TelestreamCloud\ApiException on non-2xx response
     * @return array of \TelestreamCloud\Qc\UploadSession, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadVideoWithHttpInfo($project, $video_upload_body)
    {
        // verify the required parameter 'project' is set
        if ($project === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project when calling uploadVideo');
        }
        // verify the required parameter 'video_upload_body' is set
        if ($video_upload_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $video_upload_body when calling uploadVideo');
        }
        // parse inputs
        $resourcePath = "/projects/{project}/upload.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project !== null) {
            $resourcePath = str_replace(
                "{" . "project" . "}",
                $this->apiClient->getSerializer()->toPathValue($project),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($video_upload_body)) {
            $_tempBody = $video_upload_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Api-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Api-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TelestreamCloud\Qc\UploadSession',
                '/projects/{project}/upload.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TelestreamCloud\Qc\UploadSession', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TelestreamCloud\Qc\UploadSession', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
